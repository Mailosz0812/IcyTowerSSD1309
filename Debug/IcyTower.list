
IcyTower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c74  080078c8  080078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800953c  0800953c  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800953c  0800953c  0000a53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009544  08009544  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009544  08009544  0000a544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009548  08009548  0000a548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800954c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  2000007c  080095c8  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  080095c8  0000b848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111e3  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf5  00000000  00000000  0001c28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b79  00000000  00000000  0001fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d15  00000000  00000000  00020911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126fa  00000000  00000000  00048626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed18a  00000000  00000000  0005ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  00147ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014c814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b0 	.word	0x080078b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080078b0 	.word	0x080078b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <__io_putchar>:
int32_t is_on_platform();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    if(ch == '\n'){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d102      	bne.n	8000db0 <__io_putchar+0x14>
        __io_putchar('\r');
 8000daa:	200d      	movs	r0, #13
 8000dac:	f7ff fff6 	bl	8000d9c <__io_putchar>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000db0:	1d39      	adds	r1, r7, #4
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	2201      	movs	r2, #1
 8000db8:	4803      	ldr	r0, [pc, #12]	@ (8000dc8 <__io_putchar+0x2c>)
 8000dba:	f003 feeb 	bl	8004b94 <HAL_UART_Transmit>
    return 1;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200000fc 	.word	0x200000fc

08000dcc <startMenudisplay>:

void startMenudisplay(int x) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fe8f 	bl	8001af8 <ssd1306_Fill>
    ssd1306_SetCursor(28, 24);
 8000dda:	2118      	movs	r1, #24
 8000ddc:	201c      	movs	r0, #28
 8000dde:	f000 ffd5 	bl	8001d8c <ssd1306_SetCursor>
    ssd1306_WriteString("Start Game", Font_7x10, White);
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <startMenudisplay+0x5c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	9200      	str	r2, [sp, #0]
 8000de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dea:	4810      	ldr	r0, [pc, #64]	@ (8000e2c <startMenudisplay+0x60>)
 8000dec:	f000 ffa8 	bl	8001d40 <ssd1306_WriteString>
    ssd1306_SetCursor(48, 36);
 8000df0:	2124      	movs	r1, #36	@ 0x24
 8000df2:	2030      	movs	r0, #48	@ 0x30
 8000df4:	f000 ffca 	bl	8001d8c <ssd1306_SetCursor>
    ssd1306_WriteString("Exit", Font_7x10, White);
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <startMenudisplay+0x5c>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	9200      	str	r2, [sp, #0]
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <startMenudisplay+0x64>)
 8000e02:	f000 ff9d 	bl	8001d40 <ssd1306_WriteString>
    ssd1306_Line(28, x, 97, x, White);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	b2d9      	uxtb	r1, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2201      	movs	r2, #1
 8000e10:	9200      	str	r2, [sp, #0]
 8000e12:	2261      	movs	r2, #97	@ 0x61
 8000e14:	201c      	movs	r0, #28
 8000e16:	f000 ffd1 	bl	8001dbc <ssd1306_Line>
    ssd1306_UpdateScreen();
 8000e1a:	f000 fe85 	bl	8001b28 <ssd1306_UpdateScreen>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	080093ec 	.word	0x080093ec
 8000e2c:	080078c8 	.word	0x080078c8
 8000e30:	080078d4 	.word	0x080078d4

08000e34 <generate_platforms>:

void generate_platforms() {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
    static int32_t last_y = GROUND_LEVEL;

    while (last_y > (camera_y - 128)) {
 8000e3a:	e050      	b.n	8000ede <generate_platforms+0xaa>
        for (int i = 0; i < MAX_PLATFORMS; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	e045      	b.n	8000ece <generate_platforms+0x9a>
            if (!platforms[i].active) {
 8000e42:	4a2e      	ldr	r2, [pc, #184]	@ (8000efc <generate_platforms+0xc8>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	4413      	add	r3, r2
 8000e4a:	330c      	adds	r3, #12
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d13a      	bne.n	8000ec8 <generate_platforms+0x94>
                platforms[i].x_start = 4 + (rand() % (128 - 8 - PLATFORM_LENGTH));
 8000e52:	f005 fb65 	bl	8006520 <rand>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a29      	ldr	r2, [pc, #164]	@ (8000f00 <generate_platforms+0xcc>)
 8000e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5e:	441a      	add	r2, r3
 8000e60:	1191      	asrs	r1, r2, #6
 8000e62:	17da      	asrs	r2, r3, #31
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	215a      	movs	r1, #90	@ 0x5a
 8000e68:	fb01 f202 	mul.w	r2, r1, r2
 8000e6c:	1a9a      	subs	r2, r3, r2
 8000e6e:	3204      	adds	r2, #4
 8000e70:	4922      	ldr	r1, [pc, #136]	@ (8000efc <generate_platforms+0xc8>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	440b      	add	r3, r1
 8000e78:	601a      	str	r2, [r3, #0]
                platforms[i].x_end = platforms[i].x_start + PLATFORM_LENGTH;
 8000e7a:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <generate_platforms+0xc8>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f103 021e 	add.w	r2, r3, #30
 8000e88:	491c      	ldr	r1, [pc, #112]	@ (8000efc <generate_platforms+0xc8>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	440b      	add	r3, r1
 8000e90:	3304      	adds	r3, #4
 8000e92:	601a      	str	r2, [r3, #0]
                platforms[i].y = last_y - PLATFORM_SPACING;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <generate_platforms+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1a3 0219 	sub.w	r2, r3, #25
 8000e9c:	4917      	ldr	r1, [pc, #92]	@ (8000efc <generate_platforms+0xc8>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	601a      	str	r2, [r3, #0]
                platforms[i].active = 1;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <generate_platforms+0xc8>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
                last_y = platforms[i].y;
 8000eb6:	4a11      	ldr	r2, [pc, #68]	@ (8000efc <generate_platforms+0xc8>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a10      	ldr	r2, [pc, #64]	@ (8000f04 <generate_platforms+0xd0>)
 8000ec4:	6013      	str	r3, [r2, #0]
                break;
 8000ec6:	e005      	b.n	8000ed4 <generate_platforms+0xa0>
        for (int i = 0; i < MAX_PLATFORMS; i++) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b13      	cmp	r3, #19
 8000ed2:	ddb6      	ble.n	8000e42 <generate_platforms+0xe>
            }
        }
        if (last_y < -1000) break;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <generate_platforms+0xd0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000edc:	db08      	blt.n	8000ef0 <generate_platforms+0xbc>
    while (last_y > (camera_y - 128)) {
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <generate_platforms+0xd4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <generate_platforms+0xd0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dda6      	ble.n	8000e3c <generate_platforms+0x8>
    }
}
 8000eee:	e000      	b.n	8000ef2 <generate_platforms+0xbe>
        if (last_y < -1000) break;
 8000ef0:	bf00      	nop
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001a8 	.word	0x200001a8
 8000f00:	b60b60b7 	.word	0xb60b60b7
 8000f04:	20000010 	.word	0x20000010
 8000f08:	20000194 	.word	0x20000194

08000f0c <cleanup_platforms>:

void cleanup_platforms() {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_PLATFORMS; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	e01c      	b.n	8000f52 <cleanup_platforms+0x46>
        if (platforms[i].active && (platforms[i].y > camera_y + SCREEN_HEIGHT * 2)) {
 8000f18:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <cleanup_platforms+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	4413      	add	r3, r2
 8000f20:	330c      	adds	r3, #12
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d011      	beq.n	8000f4c <cleanup_platforms+0x40>
 8000f28:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <cleanup_platforms+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	4413      	add	r3, r2
 8000f30:	3308      	adds	r3, #8
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <cleanup_platforms+0x60>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3380      	adds	r3, #128	@ 0x80
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dd06      	ble.n	8000f4c <cleanup_platforms+0x40>
            platforms[i].active = 0;
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <cleanup_platforms+0x5c>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	4413      	add	r3, r2
 8000f46:	330c      	adds	r3, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_PLATFORMS; i++) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b13      	cmp	r3, #19
 8000f56:	dddf      	ble.n	8000f18 <cleanup_platforms+0xc>
        }
    }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200001a8 	.word	0x200001a8
 8000f6c:	20000194 	.word	0x20000194

08000f70 <update_game_world>:

void update_game_world() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    game_speed = 1.0 + (score * 0.001);
 8000f74:	4b2a      	ldr	r3, [pc, #168]	@ (8001020 <update_game_world+0xb0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fabb 	bl	80004f4 <__aeabi_ui2d>
 8000f7e:	a326      	add	r3, pc, #152	@ (adr r3, 8001018 <update_game_world+0xa8>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fb30 	bl	80005e8 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <update_game_world+0xb4>)
 8000f96:	f7ff f971 	bl	800027c <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fd33 	bl	8000a0c <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8001028 <update_game_world+0xb8>)
 8000faa:	6013      	str	r3, [r2, #0]
    if (game_speed > MAX_GAME_SPEED) {
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <update_game_world+0xb8>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dd02      	ble.n	8000fc6 <update_game_world+0x56>
        game_speed = MAX_GAME_SPEED;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <update_game_world+0xb8>)
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800102c <update_game_world+0xbc>)
 8000fc4:	601a      	str	r2, [r3, #0]
    }

    if (player_y < (camera_y + SCROLL_THRESHOLD)) {
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <update_game_world+0xc0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f103 0213 	add.w	r2, r3, #19
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <update_game_world+0xc4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	db04      	blt.n	8000fe0 <update_game_world+0x70>
        camera_y = player_y - SCROLL_THRESHOLD;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <update_game_world+0xc4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3b14      	subs	r3, #20
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <update_game_world+0xc0>)
 8000fde:	6013      	str	r3, [r2, #0]
    }

    if (player_y > camera_y + SCREEN_HEIGHT) {
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <update_game_world+0xc0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <update_game_world+0xc4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	da0f      	bge.n	8001010 <update_game_world+0xa0>
        gameOver = 1;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <update_game_world+0xc8>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
        gameStart = 0;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <update_game_world+0xcc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
        if (score > highest_score) {
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <update_game_world+0xb0>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <update_game_world+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d903      	bls.n	8001010 <update_game_world+0xa0>
            highest_score = score;
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <update_game_world+0xb0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <update_game_world+0xd0>)
 800100e:	6013      	str	r3, [r2, #0]
        }
    }
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	f3af 8000 	nop.w
 8001018:	d2f1a9fc 	.word	0xd2f1a9fc
 800101c:	3f50624d 	.word	0x3f50624d
 8001020:	20000198 	.word	0x20000198
 8001024:	3ff00000 	.word	0x3ff00000
 8001028:	2000000c 	.word	0x2000000c
 800102c:	40400000 	.word	0x40400000
 8001030:	20000194 	.word	0x20000194
 8001034:	20000004 	.word	0x20000004
 8001038:	20000190 	.word	0x20000190
 800103c:	2000018c 	.word	0x2000018c
 8001040:	2000019c 	.word	0x2000019c

08001044 <draw_world>:

void draw_world() {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08b      	sub	sp, #44	@ 0x2c
 8001048:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 fd54 	bl	8001af8 <ssd1306_Fill>

    for (int i = 0; i < MAX_PLATFORMS; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	e030      	b.n	80010b8 <draw_world+0x74>
        if (platforms[i].active) {
 8001056:	4a37      	ldr	r2, [pc, #220]	@ (8001134 <draw_world+0xf0>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	330c      	adds	r3, #12
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d025      	beq.n	80010b2 <draw_world+0x6e>
            int screen_y = platforms[i].y - camera_y;
 8001066:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <draw_world+0xf0>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	3308      	adds	r3, #8
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <draw_world+0xf4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
            if (screen_y >= -16 && screen_y < 80) {
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f113 0f10 	cmn.w	r3, #16
 8001080:	db17      	blt.n	80010b2 <draw_world+0x6e>
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b4f      	cmp	r3, #79	@ 0x4f
 8001086:	dc14      	bgt.n	80010b2 <draw_world+0x6e>
                ssd1306_Line(platforms[i].x_start, screen_y,
 8001088:	4a2a      	ldr	r2, [pc, #168]	@ (8001134 <draw_world+0xf0>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b2d8      	uxtb	r0, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	b2d9      	uxtb	r1, r3
                            platforms[i].x_end, screen_y, White);
 8001098:	4a26      	ldr	r2, [pc, #152]	@ (8001134 <draw_world+0xf0>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	4413      	add	r3, r2
 80010a0:	3304      	adds	r3, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
                ssd1306_Line(platforms[i].x_start, screen_y,
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2401      	movs	r4, #1
 80010ac:	9400      	str	r4, [sp, #0]
 80010ae:	f000 fe85 	bl	8001dbc <ssd1306_Line>
    for (int i = 0; i < MAX_PLATFORMS; i++) {
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b13      	cmp	r3, #19
 80010bc:	ddcb      	ble.n	8001056 <draw_world+0x12>
            }
        }
    }

    int player_screen_y = player_y - camera_y;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <draw_world+0xf8>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <draw_world+0xf4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	61bb      	str	r3, [r7, #24]
    if (player_screen_y >= -16 && player_screen_y < 80) {
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f113 0f10 	cmn.w	r3, #16
 80010d0:	db08      	blt.n	80010e4 <draw_world+0xa0>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80010d6:	dc05      	bgt.n	80010e4 <draw_world+0xa0>
        ssd1306_DrawIcyTowerModel(player_x, player_screen_y);
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <draw_world+0xfc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	69b9      	ldr	r1, [r7, #24]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 ff64 	bl	8001fac <ssd1306_DrawIcyTowerModel>
    }

    ssd1306_Line(4, 0, 4, 63, White);
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	233f      	movs	r3, #63	@ 0x3f
 80010ea:	2204      	movs	r2, #4
 80010ec:	2100      	movs	r1, #0
 80010ee:	2004      	movs	r0, #4
 80010f0:	f000 fe64 	bl	8001dbc <ssd1306_Line>
    ssd1306_Line(124, 0, 124, 63, White);
 80010f4:	2301      	movs	r3, #1
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	233f      	movs	r3, #63	@ 0x3f
 80010fa:	227c      	movs	r2, #124	@ 0x7c
 80010fc:	2100      	movs	r1, #0
 80010fe:	207c      	movs	r0, #124	@ 0x7c
 8001100:	f000 fe5c 	bl	8001dbc <ssd1306_Line>

    char score_str[16];
    snprintf(score_str, sizeof(score_str), "%lu", score);
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <draw_world+0x100>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1d38      	adds	r0, r7, #4
 800110a:	4a0f      	ldr	r2, [pc, #60]	@ (8001148 <draw_world+0x104>)
 800110c:	2110      	movs	r1, #16
 800110e:	f005 fb07 	bl	8006720 <sniprintf>
    ssd1306_SetCursor(90, 0);
 8001112:	2100      	movs	r1, #0
 8001114:	205a      	movs	r0, #90	@ 0x5a
 8001116:	f000 fe39 	bl	8001d8c <ssd1306_SetCursor>
    ssd1306_WriteString(score_str, Font_7x10, White);
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <draw_world+0x108>)
 800111c:	1d38      	adds	r0, r7, #4
 800111e:	2201      	movs	r2, #1
 8001120:	9200      	str	r2, [sp, #0]
 8001122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001124:	f000 fe0c 	bl	8001d40 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8001128:	f000 fcfe 	bl	8001b28 <ssd1306_UpdateScreen>
}
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	@ 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	200001a8 	.word	0x200001a8
 8001138:	20000194 	.word	0x20000194
 800113c:	20000004 	.word	0x20000004
 8001140:	20000000 	.word	0x20000000
 8001144:	20000198 	.word	0x20000198
 8001148:	080078dc 	.word	0x080078dc
 800114c:	080093ec 	.word	0x080093ec

08001150 <game_over_screen>:

void game_over_screen() {
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8001156:	2000      	movs	r0, #0
 8001158:	f000 fcce 	bl	8001af8 <ssd1306_Fill>
    ssd1306_SetCursor(15, 10);
 800115c:	210a      	movs	r1, #10
 800115e:	200f      	movs	r0, #15
 8001160:	f000 fe14 	bl	8001d8c <ssd1306_SetCursor>
    ssd1306_WriteString("GAME OVER", Font_11x18, White);
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <game_over_screen+0x68>)
 8001166:	2201      	movs	r2, #1
 8001168:	9200      	str	r2, [sp, #0]
 800116a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800116c:	4813      	ldr	r0, [pc, #76]	@ (80011bc <game_over_screen+0x6c>)
 800116e:	f000 fde7 	bl	8001d40 <ssd1306_WriteString>

    char hi_score_str[20];
    snprintf(hi_score_str, sizeof(hi_score_str), "HI: %lu", highest_score);
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <game_over_screen+0x70>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1d38      	adds	r0, r7, #4
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <game_over_screen+0x74>)
 800117a:	2114      	movs	r1, #20
 800117c:	f005 fad0 	bl	8006720 <sniprintf>
    ssd1306_SetCursor(26, 35);
 8001180:	2123      	movs	r1, #35	@ 0x23
 8001182:	201a      	movs	r0, #26
 8001184:	f000 fe02 	bl	8001d8c <ssd1306_SetCursor>
    ssd1306_WriteString(hi_score_str, Font_7x10, White);
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <game_over_screen+0x78>)
 800118a:	1d38      	adds	r0, r7, #4
 800118c:	2201      	movs	r2, #1
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001192:	f000 fdd5 	bl	8001d40 <ssd1306_WriteString>

    ssd1306_SetCursor(8, 50);
 8001196:	2132      	movs	r1, #50	@ 0x32
 8001198:	2008      	movs	r0, #8
 800119a:	f000 fdf7 	bl	8001d8c <ssd1306_SetCursor>
    ssd1306_WriteString("Press RESTART button", Font_6x8, White);
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <game_over_screen+0x7c>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a6:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <game_over_screen+0x80>)
 80011a8:	f000 fdca 	bl	8001d40 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80011ac:	f000 fcbc 	bl	8001b28 <ssd1306_UpdateScreen>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	080093f8 	.word	0x080093f8
 80011bc:	080078e0 	.word	0x080078e0
 80011c0:	2000019c 	.word	0x2000019c
 80011c4:	080078ec 	.word	0x080078ec
 80011c8:	080093ec 	.word	0x080093ec
 80011cc:	080093e0 	.word	0x080093e0
 80011d0:	080078f4 	.word	0x080078f4

080011d4 <is_on_platform>:

int32_t is_on_platform() {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_PLATFORMS; i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e034      	b.n	800124a <is_on_platform+0x76>
        if (platforms[i].active &&
 80011e0:	4a22      	ldr	r2, [pc, #136]	@ (800126c <is_on_platform+0x98>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4413      	add	r3, r2
 80011e8:	330c      	adds	r3, #12
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d029      	beq.n	8001244 <is_on_platform+0x70>
            (player_y + PLAYER_HEIGHT == platforms[i].y) &&
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <is_on_platform+0x9c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f103 0210 	add.w	r2, r3, #16
 80011f8:	491c      	ldr	r1, [pc, #112]	@ (800126c <is_on_platform+0x98>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	440b      	add	r3, r1
 8001200:	3308      	adds	r3, #8
 8001202:	681b      	ldr	r3, [r3, #0]
        if (platforms[i].active &&
 8001204:	429a      	cmp	r2, r3
 8001206:	d11d      	bne.n	8001244 <is_on_platform+0x70>
            (player_x - PLAYER_WIDTH/2 <= platforms[i].x_end) &&
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <is_on_platform+0xa0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1a3 0208 	sub.w	r2, r3, #8
 8001210:	4916      	ldr	r1, [pc, #88]	@ (800126c <is_on_platform+0x98>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	440b      	add	r3, r1
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
            (player_y + PLAYER_HEIGHT == platforms[i].y) &&
 800121c:	429a      	cmp	r2, r3
 800121e:	dc11      	bgt.n	8001244 <is_on_platform+0x70>
            (player_x + PLAYER_WIDTH/2 >= platforms[i].x_start)) {
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <is_on_platform+0xa0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f103 0208 	add.w	r2, r3, #8
 8001228:	4910      	ldr	r1, [pc, #64]	@ (800126c <is_on_platform+0x98>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	440b      	add	r3, r1
 8001230:	681b      	ldr	r3, [r3, #0]
            (player_x - PLAYER_WIDTH/2 <= platforms[i].x_end) &&
 8001232:	429a      	cmp	r2, r3
 8001234:	db06      	blt.n	8001244 <is_on_platform+0x70>
            return platforms[i].y;
 8001236:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <is_on_platform+0x98>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	3308      	adds	r3, #8
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	e00d      	b.n	8001260 <is_on_platform+0x8c>
    for (int i = 0; i < MAX_PLATFORMS; i++) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b13      	cmp	r3, #19
 800124e:	ddc7      	ble.n	80011e0 <is_on_platform+0xc>
        }
    }
    if (player_y + PLAYER_HEIGHT == GROUND_LEVEL) {
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <is_on_platform+0x9c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b2f      	cmp	r3, #47	@ 0x2f
 8001256:	d101      	bne.n	800125c <is_on_platform+0x88>
        return GROUND_LEVEL;
 8001258:	233f      	movs	r3, #63	@ 0x3f
 800125a:	e001      	b.n	8001260 <is_on_platform+0x8c>
    }
    return -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	200001a8 	.word	0x200001a8
 8001270:	20000004 	.word	0x20000004
 8001274:	20000000 	.word	0x20000000

08001278 <handle_input>:

void handle_input() {
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
    if (last_key == 'a' && player_x > 4) {
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <handle_input+0x68>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b61      	cmp	r3, #97	@ 0x61
 8001282:	d109      	bne.n	8001298 <handle_input+0x20>
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <handle_input+0x6c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b04      	cmp	r3, #4
 800128a:	dd05      	ble.n	8001298 <handle_input+0x20>
        player_x -= 12;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <handle_input+0x6c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3b0c      	subs	r3, #12
 8001292:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <handle_input+0x6c>)
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00c      	b.n	80012b2 <handle_input+0x3a>
    }
    else if (last_key == 'd' && player_x < 116) {
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <handle_input+0x68>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b64      	cmp	r3, #100	@ 0x64
 800129e:	d108      	bne.n	80012b2 <handle_input+0x3a>
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <handle_input+0x6c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b73      	cmp	r3, #115	@ 0x73
 80012a6:	dc04      	bgt.n	80012b2 <handle_input+0x3a>
        player_x += 12;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <handle_input+0x6c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	330c      	adds	r3, #12
 80012ae:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <handle_input+0x6c>)
 80012b0:	6013      	str	r3, [r2, #0]
    }

    if (last_key == 'w' && player_state == PLAYER_GROUNDED) {
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <handle_input+0x68>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b77      	cmp	r3, #119	@ 0x77
 80012b8:	d10a      	bne.n	80012d0 <handle_input+0x58>
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <handle_input+0x70>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <handle_input+0x58>
        jump_velocity = JUMP_VELOCITY;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <handle_input+0x74>)
 80012c4:	f06f 020b 	mvn.w	r2, #11
 80012c8:	601a      	str	r2, [r3, #0]
        player_state = PLAYER_JUMPING;
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <handle_input+0x70>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
    }

    last_key = 0;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <handle_input+0x68>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200001a4 	.word	0x200001a4
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200001a5 	.word	0x200001a5
 80012ec:	200001a0 	.word	0x200001a0

080012f0 <update_jump_state>:

void update_jump_state() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
    if (player_state == PLAYER_JUMPING) {
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <update_jump_state+0xb8>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d143      	bne.n	8001386 <update_jump_state+0x96>
        player_y += jump_velocity;
 80012fe:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <update_jump_state+0xbc>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <update_jump_state+0xc0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a28      	ldr	r2, [pc, #160]	@ (80013ac <update_jump_state+0xbc>)
 800130a:	6013      	str	r3, [r2, #0]
        jump_velocity += GRAVITY;
 800130c:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <update_jump_state+0xc0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a27      	ldr	r2, [pc, #156]	@ (80013b0 <update_jump_state+0xc0>)
 8001314:	6013      	str	r3, [r2, #0]

        int landed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
        int32_t platform_y = is_on_platform();
 800131a:	f7ff ff5b 	bl	80011d4 <is_on_platform>
 800131e:	6038      	str	r0, [r7, #0]
        if (platform_y != -1) {
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001326:	d005      	beq.n	8001334 <update_jump_state+0x44>
            landed = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
            player_y = platform_y - PLAYER_HEIGHT;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3b10      	subs	r3, #16
 8001330:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <update_jump_state+0xbc>)
 8001332:	6013      	str	r3, [r2, #0]
        }

        if (player_y + PLAYER_HEIGHT >= GROUND_LEVEL) {
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <update_jump_state+0xbc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b2e      	cmp	r3, #46	@ 0x2e
 800133a:	dd04      	ble.n	8001346 <update_jump_state+0x56>
            landed = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	607b      	str	r3, [r7, #4]
            player_y = GROUND_LEVEL - PLAYER_HEIGHT;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <update_jump_state+0xbc>)
 8001342:	222f      	movs	r2, #47	@ 0x2f
 8001344:	601a      	str	r2, [r3, #0]
        }

        if (landed) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d028      	beq.n	800139e <update_jump_state+0xae>
            player_state = PLAYER_GROUNDED;
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <update_jump_state+0xb8>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
            jump_velocity = 0;
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <update_jump_state+0xc0>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

            if (platform_y != -1) {
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d01e      	beq.n	800139e <update_jump_state+0xae>
                if (platform_y < highest_platform_y) {
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <update_jump_state+0xc4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	da19      	bge.n	800139e <update_jump_state+0xae>
                    score += highest_platform_y - platform_y;
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <update_jump_state+0xc4>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	461a      	mov	r2, r3
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <update_jump_state+0xc8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4413      	add	r3, r2
 800137a:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <update_jump_state+0xc8>)
 800137c:	6013      	str	r3, [r2, #0]
                    highest_platform_y = platform_y;
 800137e:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <update_jump_state+0xc4>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6013      	str	r3, [r2, #0]
        if (is_on_platform() == -1) {
            player_state = PLAYER_JUMPING;
            jump_velocity = 0;
        }
    }
}
 8001384:	e00b      	b.n	800139e <update_jump_state+0xae>
        if (is_on_platform() == -1) {
 8001386:	f7ff ff25 	bl	80011d4 <is_on_platform>
 800138a:	4603      	mov	r3, r0
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d105      	bne.n	800139e <update_jump_state+0xae>
            player_state = PLAYER_JUMPING;
 8001392:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <update_jump_state+0xb8>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
            jump_velocity = 0;
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <update_jump_state+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001a5 	.word	0x200001a5
 80013ac:	20000004 	.word	0x20000004
 80013b0:	200001a0 	.word	0x200001a0
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000198 	.word	0x20000198

080013bc <reset_game>:

void reset_game() {
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
    srand(HAL_GetTick());
 80013c2:	f001 f88d 	bl	80024e0 <HAL_GetTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 f87b 	bl	80064c4 <srand>

    player_x = 60;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <reset_game+0x7c>)
 80013d0:	223c      	movs	r2, #60	@ 0x3c
 80013d2:	601a      	str	r2, [r3, #0]
    player_y = GROUND_LEVEL - PLAYER_HEIGHT;
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <reset_game+0x80>)
 80013d6:	222f      	movs	r2, #47	@ 0x2f
 80013d8:	601a      	str	r2, [r3, #0]
    camera_y = 0;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <reset_game+0x84>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    score = 0;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <reset_game+0x88>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
    game_speed = 1.0;
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <reset_game+0x8c>)
 80013e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013ec:	601a      	str	r2, [r3, #0]
    jump_velocity = 0;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <reset_game+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
    highest_platform_y = GROUND_LEVEL;
 80013f4:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <reset_game+0x94>)
 80013f6:	223f      	movs	r2, #63	@ 0x3f
 80013f8:	601a      	str	r2, [r3, #0]
    player_state = PLAYER_GROUNDED;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <reset_game+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < MAX_PLATFORMS; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e009      	b.n	800141a <reset_game+0x5e>
        platforms[i].active = 0;
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <reset_game+0x9c>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	330c      	adds	r3, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_PLATFORMS; i++) {
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b13      	cmp	r3, #19
 800141e:	ddf2      	ble.n	8001406 <reset_game+0x4a>
    }

    platforms[0] = (Platform){4, 124, GROUND_LEVEL, 1};
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <reset_game+0x9c>)
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <reset_game+0xa0>)
 8001424:	4614      	mov	r4, r2
 8001426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    generate_platforms();
 800142c:	f7ff fd02 	bl	8000e34 <generate_platforms>
}
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004
 8001440:	20000194 	.word	0x20000194
 8001444:	20000198 	.word	0x20000198
 8001448:	2000000c 	.word	0x2000000c
 800144c:	200001a0 	.word	0x200001a0
 8001450:	20000008 	.word	0x20000008
 8001454:	200001a5 	.word	0x200001a5
 8001458:	200001a8 	.word	0x200001a8
 800145c:	0800790c 	.word	0x0800790c

08001460 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_BUTTON_Pin) {
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001470:	d10d      	bne.n	800148e <HAL_GPIO_EXTI_Callback+0x2e>
        HAL_Delay(50);
 8001472:	2032      	movs	r0, #50	@ 0x32
 8001474:	f001 f840 	bl	80024f8 <HAL_Delay>
        if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 8001478:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800147c:	4806      	ldr	r0, [pc, #24]	@ (8001498 <HAL_GPIO_EXTI_Callback+0x38>)
 800147e:	f001 fbb9 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <HAL_GPIO_EXTI_Callback+0x2e>
            restart_flag = 1;
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <HAL_GPIO_EXTI_Callback+0x3c>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	48000800 	.word	0x48000800
 800149c:	200002e8 	.word	0x200002e8

080014a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    uint8_t fstChar = rxBuffer[0];
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_UART_RxCpltCallback+0xdc>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	73fb      	strb	r3, [r7, #15]
    if (huart->Instance == USART2) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <HAL_UART_RxCpltCallback+0xe0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d15c      	bne.n	8001572 <HAL_UART_RxCpltCallback+0xd2>
        if (!gameStart && !gameOver) {
 80014b8:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <HAL_UART_RxCpltCallback+0xe4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d14b      	bne.n	8001558 <HAL_UART_RxCpltCallback+0xb8>
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_UART_RxCpltCallback+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d147      	bne.n	8001558 <HAL_UART_RxCpltCallback+0xb8>
            if (fstChar == 'u') {
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b75      	cmp	r3, #117	@ 0x75
 80014cc:	d106      	bne.n	80014dc <HAL_UART_RxCpltCallback+0x3c>
                startMenudisplay(34);
 80014ce:	2022      	movs	r0, #34	@ 0x22
 80014d0:	f7ff fc7c 	bl	8000dcc <startMenudisplay>
                checkMenu = 1;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <HAL_UART_RxCpltCallback+0xec>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
            if (fstChar == 'u') {
 80014da:	e041      	b.n	8001560 <HAL_UART_RxCpltCallback+0xc0>
            } else if (fstChar == 'j') {
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b6a      	cmp	r3, #106	@ 0x6a
 80014e0:	d106      	bne.n	80014f0 <HAL_UART_RxCpltCallback+0x50>
                startMenudisplay(45);
 80014e2:	202d      	movs	r0, #45	@ 0x2d
 80014e4:	f7ff fc72 	bl	8000dcc <startMenudisplay>
                checkMenu = 0;
 80014e8:	4b28      	ldr	r3, [pc, #160]	@ (800158c <HAL_UART_RxCpltCallback+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
            if (fstChar == 'u') {
 80014ee:	e037      	b.n	8001560 <HAL_UART_RxCpltCallback+0xc0>
            } else if (fstChar == 'k') {
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b6b      	cmp	r3, #107	@ 0x6b
 80014f4:	d134      	bne.n	8001560 <HAL_UART_RxCpltCallback+0xc0>
                if (checkMenu) {
 80014f6:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_UART_RxCpltCallback+0xec>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_UART_RxCpltCallback+0x6e>
                    gameStart = 1;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <HAL_UART_RxCpltCallback+0xe4>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
                    reset_game();
 8001504:	f7ff ff5a 	bl	80013bc <reset_game>
                    draw_world();
 8001508:	f7ff fd9c 	bl	8001044 <draw_world>
            if (fstChar == 'u') {
 800150c:	e028      	b.n	8001560 <HAL_UART_RxCpltCallback+0xc0>
                } else {
                    // Wybrano Exit - przejście w tryb uśpienia
                    ssd1306_Fill(Black);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 faf2 	bl	8001af8 <ssd1306_Fill>
                    ssd1306_UpdateScreen();
 8001514:	f000 fb08 	bl	8001b28 <ssd1306_UpdateScreen>
                    HAL_Delay(100);
 8001518:	2064      	movs	r0, #100	@ 0x64
 800151a:	f000 ffed 	bl	80024f8 <HAL_Delay>

                    // Wyłącz odbieranie UART
                    HAL_UART_AbortReceive_IT(&huart2);
 800151e:	481c      	ldr	r0, [pc, #112]	@ (8001590 <HAL_UART_RxCpltCallback+0xf0>)
 8001520:	f003 fc0e 	bl	8004d40 <HAL_UART_AbortReceive_IT>

                    // Konfiguracja wybudzenia przez przycisk
                    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
 8001524:	2002      	movs	r0, #2
 8001526:	f001 fbad 	bl	8002c84 <HAL_PWR_EnableWakeUpPin>
                    HAL_SuspendTick();
 800152a:	f001 f809 	bl	8002540 <HAL_SuspendTick>

                    // Przejście w tryb SLEEP
                    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800152e:	2101      	movs	r1, #1
 8001530:	2000      	movs	r0, #0
 8001532:	f001 fbc7 	bl	8002cc4 <HAL_PWR_EnterSLEEPMode>

                    // Po wybudzeniu
                    HAL_ResumeTick();
 8001536:	f001 f813 	bl	8002560 <HAL_ResumeTick>
                    MX_USART2_UART_Init();
 800153a:	f000 f939 	bl	80017b0 <MX_USART2_UART_Init>
                    MX_SPI1_Init();
 800153e:	f000 f8f9 	bl	8001734 <MX_SPI1_Init>
                    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	490d      	ldr	r1, [pc, #52]	@ (800157c <HAL_UART_RxCpltCallback+0xdc>)
 8001546:	4812      	ldr	r0, [pc, #72]	@ (8001590 <HAL_UART_RxCpltCallback+0xf0>)
 8001548:	f003 fbae 	bl	8004ca8 <HAL_UART_Receive_IT>
                    ssd1306_Init();
 800154c:	f000 fa6a 	bl	8001a24 <ssd1306_Init>
                    startMenudisplay(34);
 8001550:	2022      	movs	r0, #34	@ 0x22
 8001552:	f7ff fc3b 	bl	8000dcc <startMenudisplay>
            if (fstChar == 'u') {
 8001556:	e003      	b.n	8001560 <HAL_UART_RxCpltCallback+0xc0>
                }
            }
        } else {
            last_key = fstChar;
 8001558:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_UART_RxCpltCallback+0xf4>)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	7013      	strb	r3, [r2, #0]
 800155e:	e000      	b.n	8001562 <HAL_UART_RxCpltCallback+0xc2>
            if (fstChar == 'u') {
 8001560:	bf00      	nop
        }
        scndChar = fstChar;
 8001562:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_UART_RxCpltCallback+0xf8>)
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	7013      	strb	r3, [r2, #0]
        HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	4904      	ldr	r1, [pc, #16]	@ (800157c <HAL_UART_RxCpltCallback+0xdc>)
 800156c:	4808      	ldr	r0, [pc, #32]	@ (8001590 <HAL_UART_RxCpltCallback+0xf0>)
 800156e:	f003 fb9b 	bl	8004ca8 <HAL_UART_Receive_IT>
    }
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000184 	.word	0x20000184
 8001580:	40004400 	.word	0x40004400
 8001584:	2000018c 	.word	0x2000018c
 8001588:	20000190 	.word	0x20000190
 800158c:	20000188 	.word	0x20000188
 8001590:	200000fc 	.word	0x200000fc
 8001594:	200001a4 	.word	0x200001a4
 8001598:	20000186 	.word	0x20000186

0800159c <main>:
/* USER CODE END 0 */

int main(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af02      	add	r7, sp, #8
    HAL_Init();
 80015a2:	f000 ff2d 	bl	8002400 <HAL_Init>
    SystemClock_Config();
 80015a6:	f000 f873 	bl	8001690 <SystemClock_Config>
    MX_GPIO_Init();
 80015aa:	f000 f931 	bl	8001810 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80015ae:	f000 f8ff 	bl	80017b0 <MX_USART2_UART_Init>
    MX_SPI1_Init();
 80015b2:	f000 f8bf 	bl	8001734 <MX_SPI1_Init>

    /* USER CODE BEGIN 2 */
    ssd1306_Init();
 80015b6:	f000 fa35 	bl	8001a24 <ssd1306_Init>
    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 80015ba:	2201      	movs	r2, #1
 80015bc:	492b      	ldr	r1, [pc, #172]	@ (800166c <main+0xd0>)
 80015be:	482c      	ldr	r0, [pc, #176]	@ (8001670 <main+0xd4>)
 80015c0:	f003 fb72 	bl	8004ca8 <HAL_UART_Receive_IT>
    ssd1306_SetCursor(15,20);
 80015c4:	2114      	movs	r1, #20
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 fbe0 	bl	8001d8c <ssd1306_SetCursor>
    ssd1306_WriteString("ICY TOWER", Font_11x18, White);
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <main+0xd8>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	9200      	str	r2, [sp, #0]
 80015d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d4:	4828      	ldr	r0, [pc, #160]	@ (8001678 <main+0xdc>)
 80015d6:	f000 fbb3 	bl	8001d40 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80015da:	f000 faa5 	bl	8001b28 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 80015de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015e2:	f000 ff89 	bl	80024f8 <HAL_Delay>
    startMenudisplay(34);
 80015e6:	2022      	movs	r0, #34	@ 0x22
 80015e8:	f7ff fbf0 	bl	8000dcc <startMenudisplay>
    /* USER CODE END 2 */

    while (1) {
        if (gameStart && !gameOver) {
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <main+0xe0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d024      	beq.n	800163e <main+0xa2>
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <main+0xe4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d120      	bne.n	800163e <main+0xa2>
            generate_platforms();
 80015fc:	f7ff fc1a 	bl	8000e34 <generate_platforms>
            cleanup_platforms();
 8001600:	f7ff fc84 	bl	8000f0c <cleanup_platforms>
            update_game_world();
 8001604:	f7ff fcb4 	bl	8000f70 <update_game_world>

            handle_input();
 8001608:	f7ff fe36 	bl	8001278 <handle_input>
            update_jump_state();
 800160c:	f7ff fe70 	bl	80012f0 <update_jump_state>

            draw_world();
 8001610:	f7ff fd18 	bl	8001044 <draw_world>

            uint32_t delay = (uint32_t)(50 / game_speed);
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <main+0xe8>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001688 <main+0xec>
 800161e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001626:	ee17 3a90 	vmov	r3, s15
 800162a:	607b      	str	r3, [r7, #4]
            if (delay < 10) delay = 10;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b09      	cmp	r3, #9
 8001630:	d801      	bhi.n	8001636 <main+0x9a>
 8001632:	230a      	movs	r3, #10
 8001634:	607b      	str	r3, [r7, #4]
            HAL_Delay(delay);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 ff5e 	bl	80024f8 <HAL_Delay>
        if (gameStart && !gameOver) {
 800163c:	e015      	b.n	800166a <main+0xce>
        }
        else if (gameOver) {
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <main+0xe4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0d2      	beq.n	80015ec <main+0x50>
            game_over_screen();
 8001646:	f7ff fd83 	bl	8001150 <game_over_screen>
            if (restart_flag) {
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <main+0xf0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0cb      	beq.n	80015ec <main+0x50>
                restart_flag = 0;
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <main+0xf0>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
                gameOver = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <main+0xe4>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
                reset_game();
 8001660:	f7ff feac 	bl	80013bc <reset_game>
                gameStart = 1;
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <main+0xe0>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
        if (gameStart && !gameOver) {
 800166a:	e7bf      	b.n	80015ec <main+0x50>
 800166c:	20000184 	.word	0x20000184
 8001670:	200000fc 	.word	0x200000fc
 8001674:	080093f8 	.word	0x080093f8
 8001678:	0800791c 	.word	0x0800791c
 800167c:	2000018c 	.word	0x2000018c
 8001680:	20000190 	.word	0x20000190
 8001684:	2000000c 	.word	0x2000000c
 8001688:	42480000 	.word	0x42480000
 800168c:	200002e8 	.word	0x200002e8

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b096      	sub	sp, #88	@ 0x58
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	2244      	movs	r2, #68	@ 0x44
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 f8cf 	bl	8006842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	463b      	mov	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016b6:	f001 fb47 	bl	8002d48 <HAL_PWREx_ControlVoltageScaling>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016c0:	f000 f93e 	bl	8001940 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c4:	2302      	movs	r3, #2
 80016c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ce:	2310      	movs	r3, #16
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016d6:	2302      	movs	r3, #2
 80016d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016de:	230a      	movs	r3, #10
 80016e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016e2:	2307      	movs	r3, #7
 80016e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fbc6 	bl	8002e84 <HAL_RCC_OscConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016fe:	f000 f91f 	bl	8001940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	230f      	movs	r3, #15
 8001704:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001706:	2303      	movs	r3, #3
 8001708:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	2104      	movs	r1, #4
 800171a:	4618      	mov	r0, r3
 800171c:	f001 ff8e 	bl	800363c <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001726:	f000 f90b 	bl	8001940 <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3758      	adds	r7, #88	@ 0x58
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <MX_SPI1_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <MX_SPI1_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001740:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_SPI1_Init+0x74>)
 800174e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001752:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <MX_SPI1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001766:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_SPI1_Init+0x74>)
 800176a:	2210      	movs	r2, #16
 800176c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <MX_SPI1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001782:	2207      	movs	r2, #7
 8001784:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_SPI1_Init+0x74>)
 800178e:	2208      	movs	r2, #8
 8001790:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_SPI1_Init+0x74>)
 8001794:	f002 fe32 	bl	80043fc <HAL_SPI_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800179e:	f000 f8cf 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000098 	.word	0x20000098
 80017ac:	40013000 	.word	0x40013000

080017b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	@ (800180c <MX_USART2_UART_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_USART2_UART_Init+0x58>)
 80017f4:	f003 f980 	bl	8004af8 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017fe:	f000 f89f 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000fc 	.word	0x200000fc
 800180c:	40004400 	.word	0x40004400

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b43      	ldr	r3, [pc, #268]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a42      	ldr	r2, [pc, #264]	@ (8001934 <MX_GPIO_Init+0x124>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b40      	ldr	r3, [pc, #256]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	4b3d      	ldr	r3, [pc, #244]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a3c      	ldr	r2, [pc, #240]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b3a      	ldr	r3, [pc, #232]	@ (8001934 <MX_GPIO_Init+0x124>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a36      	ldr	r2, [pc, #216]	@ (8001934 <MX_GPIO_Init+0x124>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a30      	ldr	r2, [pc, #192]	@ (8001934 <MX_GPIO_Init+0x124>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <MX_GPIO_Init+0x124>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800188c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001890:	f001 f9c8 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	4827      	ldr	r0, [pc, #156]	@ (8001938 <MX_GPIO_Init+0x128>)
 800189a:	f001 f9c3 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2140      	movs	r1, #64	@ 0x40
 80018a2:	4826      	ldr	r0, [pc, #152]	@ (800193c <MX_GPIO_Init+0x12c>)
 80018a4:	f001 f9be 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80018a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	481e      	ldr	r0, [pc, #120]	@ (8001938 <MX_GPIO_Init+0x128>)
 80018c0:	f000 ffee 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80018c4:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e0:	f000 ffde 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	480f      	ldr	r0, [pc, #60]	@ (8001938 <MX_GPIO_Init+0x128>)
 80018fc:	f000 ffd0 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001900:	2340      	movs	r3, #64	@ 0x40
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4809      	ldr	r0, [pc, #36]	@ (800193c <MX_GPIO_Init+0x12c>)
 8001918:	f000 ffc2 	bl	80028a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2028      	movs	r0, #40	@ 0x28
 8001922:	f000 ff08 	bl	8002736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001926:	2028      	movs	r0, #40	@ 0x28
 8001928:	f000 ff21 	bl	800276e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_3 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	@ 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	48000800 	.word	0x48000800
 800193c:	48000400 	.word	0x48000400

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <Error_Handler+0x8>

0800194c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2140      	movs	r1, #64	@ 0x40
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <ssd1306_Reset+0x3c>)
 8001956:	f001 f965 	bl	8002c24 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001964:	f001 f95e 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001968:	200a      	movs	r0, #10
 800196a:	f000 fdc5 	bl	80024f8 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001978:	f001 f954 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800197c:	200a      	movs	r0, #10
 800197e:	f000 fdbb 	bl	80024f8 <HAL_Delay>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	48000400 	.word	0x48000400

0800198c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001996:	2200      	movs	r2, #0
 8001998:	2140      	movs	r1, #64	@ 0x40
 800199a:	480c      	ldr	r0, [pc, #48]	@ (80019cc <ssd1306_WriteCommand+0x40>)
 800199c:	f001 f942 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80019a0:	2200      	movs	r2, #0
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <ssd1306_WriteCommand+0x44>)
 80019a6:	f001 f93d 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80019aa:	1df9      	adds	r1, r7, #7
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	2201      	movs	r2, #1
 80019b2:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <ssd1306_WriteCommand+0x48>)
 80019b4:	f002 fdc5 	bl	8004542 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80019b8:	2201      	movs	r2, #1
 80019ba:	2140      	movs	r1, #64	@ 0x40
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <ssd1306_WriteCommand+0x40>)
 80019be:	f001 f931 	bl	8002c24 <HAL_GPIO_WritePin>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	20000098 	.word	0x20000098

080019d8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80019e2:	2200      	movs	r2, #0
 80019e4:	2140      	movs	r1, #64	@ 0x40
 80019e6:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <ssd1306_WriteData+0x40>)
 80019e8:	f001 f91c 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80019ec:	2201      	movs	r2, #1
 80019ee:	2180      	movs	r1, #128	@ 0x80
 80019f0:	480a      	ldr	r0, [pc, #40]	@ (8001a1c <ssd1306_WriteData+0x44>)
 80019f2:	f001 f917 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <ssd1306_WriteData+0x48>)
 8001a02:	f002 fd9e 	bl	8004542 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001a06:	2201      	movs	r2, #1
 8001a08:	2140      	movs	r1, #64	@ 0x40
 8001a0a:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <ssd1306_WriteData+0x40>)
 8001a0c:	f001 f90a 	bl	8002c24 <HAL_GPIO_WritePin>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	20000098 	.word	0x20000098

08001a24 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a28:	f7ff ff90 	bl	800194c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a2c:	2064      	movs	r0, #100	@ 0x64
 8001a2e:	f000 fd63 	bl	80024f8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 fa9c 	bl	8001f70 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a38:	2020      	movs	r0, #32
 8001a3a:	f7ff ffa7 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff ffa4 	bl	800198c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a44:	20b0      	movs	r0, #176	@ 0xb0
 8001a46:	f7ff ffa1 	bl	800198c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a4a:	20c8      	movs	r0, #200	@ 0xc8
 8001a4c:	f7ff ff9e 	bl	800198c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff ff9b 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a56:	2010      	movs	r0, #16
 8001a58:	f7ff ff98 	bl	800198c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a5c:	2040      	movs	r0, #64	@ 0x40
 8001a5e:	f7ff ff95 	bl	800198c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a62:	20ff      	movs	r0, #255	@ 0xff
 8001a64:	f000 fa71 	bl	8001f4a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a68:	20a1      	movs	r0, #161	@ 0xa1
 8001a6a:	f7ff ff8f 	bl	800198c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a6e:	20a6      	movs	r0, #166	@ 0xa6
 8001a70:	f7ff ff8c 	bl	800198c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a74:	20a8      	movs	r0, #168	@ 0xa8
 8001a76:	f7ff ff89 	bl	800198c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a7a:	203f      	movs	r0, #63	@ 0x3f
 8001a7c:	f7ff ff86 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a80:	20a4      	movs	r0, #164	@ 0xa4
 8001a82:	f7ff ff83 	bl	800198c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a86:	20d3      	movs	r0, #211	@ 0xd3
 8001a88:	f7ff ff80 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff ff7d 	bl	800198c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a92:	20d5      	movs	r0, #213	@ 0xd5
 8001a94:	f7ff ff7a 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a98:	20f0      	movs	r0, #240	@ 0xf0
 8001a9a:	f7ff ff77 	bl	800198c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a9e:	20d9      	movs	r0, #217	@ 0xd9
 8001aa0:	f7ff ff74 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001aa4:	2022      	movs	r0, #34	@ 0x22
 8001aa6:	f7ff ff71 	bl	800198c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001aaa:	20da      	movs	r0, #218	@ 0xda
 8001aac:	f7ff ff6e 	bl	800198c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ab0:	2012      	movs	r0, #18
 8001ab2:	f7ff ff6b 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ab6:	20db      	movs	r0, #219	@ 0xdb
 8001ab8:	f7ff ff68 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001abc:	2020      	movs	r0, #32
 8001abe:	f7ff ff65 	bl	800198c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ac2:	208d      	movs	r0, #141	@ 0x8d
 8001ac4:	f7ff ff62 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ac8:	2014      	movs	r0, #20
 8001aca:	f7ff ff5f 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fa4e 	bl	8001f70 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 f80f 	bl	8001af8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ada:	f000 f825 	bl	8001b28 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <ssd1306_Init+0xd0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <ssd1306_Init+0xd0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001aea:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <ssd1306_Init+0xd0>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	711a      	strb	r2, [r3, #4]
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200006ec 	.word	0x200006ec

08001af8 <ssd1306_Fill>:
    {
        return 0;
    }
}
/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <ssd1306_Fill+0x14>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e000      	b.n	8001b0e <ssd1306_Fill+0x16>
 8001b0c:	23ff      	movs	r3, #255	@ 0xff
 8001b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b12:	4619      	mov	r1, r3
 8001b14:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <ssd1306_Fill+0x2c>)
 8001b16:	f004 fe94 	bl	8006842 <memset>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200002ec 	.word	0x200002ec

08001b28 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	71fb      	strb	r3, [r7, #7]
 8001b32:	e016      	b.n	8001b62 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	3b50      	subs	r3, #80	@ 0x50
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff26 	bl	800198c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff ff23 	bl	800198c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b46:	2010      	movs	r0, #16
 8001b48:	f7ff ff20 	bl	800198c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	01db      	lsls	r3, r3, #7
 8001b50:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <ssd1306_UpdateScreen+0x4c>)
 8001b52:	4413      	add	r3, r2
 8001b54:	2180      	movs	r1, #128	@ 0x80
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff3e 	bl	80019d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d9e5      	bls.n	8001b34 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002ec 	.word	0x200002ec

08001b78 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	460b      	mov	r3, r1
 8001b84:	71bb      	strb	r3, [r7, #6]
 8001b86:	4613      	mov	r3, r2
 8001b88:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db3d      	blt.n	8001c0e <ssd1306_DrawPixel+0x96>
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b96:	d83a      	bhi.n	8001c0e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001b98:	797b      	ldrb	r3, [r7, #5]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d11a      	bne.n	8001bd4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	b2d8      	uxtb	r0, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	01db      	lsls	r3, r3, #7
 8001baa:	4413      	add	r3, r2
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	b25a      	sxtb	r2, r3
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b259      	sxtb	r1, r3
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	01db      	lsls	r3, r3, #7
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2c9      	uxtb	r1, r1
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001bd0:	54d1      	strb	r1, [r2, r3]
 8001bd2:	e01d      	b.n	8001c10 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	b2d8      	uxtb	r0, r3
 8001bdc:	4603      	mov	r3, r0
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	4413      	add	r3, r2
 8001be2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	b25a      	sxtb	r2, r3
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b259      	sxtb	r1, r3
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	4603      	mov	r3, r0
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	4413      	add	r3, r2
 8001c06:	b2c9      	uxtb	r1, r1
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <ssd1306_DrawPixel+0xa4>)
 8001c0a:	54d1      	strb	r1, [r2, r3]
 8001c0c:	e000      	b.n	8001c10 <ssd1306_DrawPixel+0x98>
        return;
 8001c0e:	bf00      	nop
    }
}
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200002ec 	.word	0x200002ec

08001c20 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4604      	mov	r4, r0
 8001c28:	4638      	mov	r0, r7
 8001c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001c2e:	4623      	mov	r3, r4
 8001c30:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b1f      	cmp	r3, #31
 8001c36:	d902      	bls.n	8001c3e <ssd1306_WriteChar+0x1e>
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c3c:	d901      	bls.n	8001c42 <ssd1306_WriteChar+0x22>
        return 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e077      	b.n	8001d32 <ssd1306_WriteChar+0x112>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001c42:	4b3e      	ldr	r3, [pc, #248]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	783b      	ldrb	r3, [r7, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2b80      	cmp	r3, #128	@ 0x80
 8001c4e:	dc06      	bgt.n	8001c5e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001c50:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001c52:	885b      	ldrh	r3, [r3, #2]
 8001c54:	461a      	mov	r2, r3
 8001c56:	787b      	ldrb	r3, [r7, #1]
 8001c58:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001c5a:	2b40      	cmp	r3, #64	@ 0x40
 8001c5c:	dd01      	ble.n	8001c62 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e067      	b.n	8001d32 <ssd1306_WriteChar+0x112>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e04e      	b.n	8001d06 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	3b20      	subs	r3, #32
 8001c6e:	7879      	ldrb	r1, [r7, #1]
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4619      	mov	r1, r3
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	440b      	add	r3, r1
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	e036      	b.n	8001cf6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c98:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b2d8      	uxtb	r0, r3
 8001ca6:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001ca8:	885b      	ldrh	r3, [r3, #2]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7ff ff5d 	bl	8001b78 <ssd1306_DrawPixel>
 8001cbe:	e017      	b.n	8001cf0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2d8      	uxtb	r0, r3
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001cd0:	885b      	ldrh	r3, [r3, #2]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2d9      	uxtb	r1, r3
 8001cdc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	f7ff ff44 	bl	8001b78 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	783b      	ldrb	r3, [r7, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d3c3      	bcc.n	8001c88 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d3ab      	bcc.n	8001c68 <ssd1306_WriteChar+0x48>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d005      	beq.n	8001d26 <ssd1306_WriteChar+0x106>
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	3a20      	subs	r2, #32
 8001d20:	440a      	add	r2, r1
 8001d22:	7812      	ldrb	r2, [r2, #0]
 8001d24:	e000      	b.n	8001d28 <ssd1306_WriteChar+0x108>
 8001d26:	783a      	ldrb	r2, [r7, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <ssd1306_WriteChar+0x11c>)
 8001d2e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200006ec 	.word	0x200006ec

08001d40 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4638      	mov	r0, r7
 8001d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001d4e:	e013      	b.n	8001d78 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	7818      	ldrb	r0, [r3, #0]
 8001d54:	7e3b      	ldrb	r3, [r7, #24]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	463b      	mov	r3, r7
 8001d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5c:	f7ff ff60 	bl	8001c20 <ssd1306_WriteChar>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d002      	beq.n	8001d72 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	e008      	b.n	8001d84 <ssd1306_WriteString+0x44>
        }
        str++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e7      	bne.n	8001d50 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	460a      	mov	r2, r1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <ssd1306_SetCursor+0x2c>)
 8001da2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <ssd1306_SetCursor+0x2c>)
 8001daa:	805a      	strh	r2, [r3, #2]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	200006ec 	.word	0x200006ec

08001dbc <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4623      	mov	r3, r4
 8001dcc:	71fb      	strb	r3, [r7, #7]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71bb      	strb	r3, [r7, #6]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	717b      	strb	r3, [r7, #5]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001dda:	797a      	ldrb	r2, [r7, #5]
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bfb8      	it	lt
 8001de4:	425b      	neglt	r3, r3
 8001de6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001de8:	793a      	ldrb	r2, [r7, #4]
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bfb8      	it	lt
 8001df2:	425b      	neglt	r3, r3
 8001df4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	797b      	ldrb	r3, [r7, #5]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d201      	bcs.n	8001e02 <ssd1306_Line+0x46>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e001      	b.n	8001e06 <ssd1306_Line+0x4a>
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001e08:	79ba      	ldrb	r2, [r7, #6]
 8001e0a:	793b      	ldrb	r3, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d201      	bcs.n	8001e14 <ssd1306_Line+0x58>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e001      	b.n	8001e18 <ssd1306_Line+0x5c>
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8001e22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001e26:	7939      	ldrb	r1, [r7, #4]
 8001e28:	797b      	ldrb	r3, [r7, #5]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fea4 	bl	8001b78 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001e30:	e024      	b.n	8001e7c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001e32:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001e36:	79b9      	ldrb	r1, [r7, #6]
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fe9c 	bl	8001b78 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	425b      	negs	r3, r3
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dd08      	ble.n	8001e62 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4413      	add	r3, r2
 8001e60:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	da08      	bge.n	8001e7c <ssd1306_Line+0xc0>
            error += deltaX;
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	4413      	add	r3, r2
 8001e70:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	4413      	add	r3, r2
 8001e7a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001e7c:	79fa      	ldrb	r2, [r7, #7]
 8001e7e:	797b      	ldrb	r3, [r7, #5]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1d6      	bne.n	8001e32 <ssd1306_Line+0x76>
 8001e84:	79ba      	ldrb	r2, [r7, #6]
 8001e86:	793b      	ldrb	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1d2      	bne.n	8001e32 <ssd1306_Line+0x76>
        }
    }
    return;
 8001e8c:	bf00      	nop
}
 8001e8e:	3724      	adds	r7, #36	@ 0x24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}

08001e94 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	603a      	str	r2, [r7, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	71bb      	strb	r3, [r7, #6]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001eaa:	797b      	ldrb	r3, [r7, #5]
 8001eac:	3307      	adds	r3, #7
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da00      	bge.n	8001eb4 <ssd1306_DrawBitmap+0x20>
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	10db      	asrs	r3, r3, #3
 8001eb6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db3e      	blt.n	8001f42 <ssd1306_DrawBitmap+0xae>
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec8:	d83b      	bhi.n	8001f42 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73bb      	strb	r3, [r7, #14]
 8001ece:	e033      	b.n	8001f38 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	737b      	strb	r3, [r7, #13]
 8001ed4:	e026      	b.n	8001f24 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e00d      	b.n	8001f04 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001ee8:	7bbb      	ldrb	r3, [r7, #14]
 8001eea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	7b7a      	ldrb	r2, [r7, #13]
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4413      	add	r3, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da08      	bge.n	8001f1e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	7b7b      	ldrb	r3, [r7, #13]
 8001f10:	4413      	add	r3, r2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	7f3a      	ldrb	r2, [r7, #28]
 8001f16:	79b9      	ldrb	r1, [r7, #6]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fe2d 	bl	8001b78 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001f1e:	7b7b      	ldrb	r3, [r7, #13]
 8001f20:	3301      	adds	r3, #1
 8001f22:	737b      	strb	r3, [r7, #13]
 8001f24:	7b7a      	ldrb	r2, [r7, #13]
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3d4      	bcc.n	8001ed6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	73bb      	strb	r3, [r7, #14]
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	3301      	adds	r3, #1
 8001f36:	71bb      	strb	r3, [r7, #6]
 8001f38:	7bba      	ldrb	r2, [r7, #14]
 8001f3a:	7e3b      	ldrb	r3, [r7, #24]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3c7      	bcc.n	8001ed0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001f40:	e000      	b.n	8001f44 <ssd1306_DrawBitmap+0xb0>
        return;
 8001f42:	bf00      	nop
}
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f54:	2381      	movs	r3, #129	@ 0x81
 8001f56:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fd16 	bl	800198c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fd12 	bl	800198c <ssd1306_WriteCommand>
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f80:	23af      	movs	r3, #175	@ 0xaf
 8001f82:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <ssd1306_SetDisplayOn+0x38>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	715a      	strb	r2, [r3, #5]
 8001f8a:	e004      	b.n	8001f96 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f8c:	23ae      	movs	r3, #174	@ 0xae
 8001f8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <ssd1306_SetDisplayOn+0x38>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fcf7 	bl	800198c <ssd1306_WriteCommand>
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200006ec 	.word	0x200006ec

08001fac <ssd1306_DrawIcyTowerModel>:
		,0x40
		,0x7e
		,0x66
};
void ssd1306_DrawIcyTowerModel(int x,int y)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	ssd1306_DrawBitmap(x, y, icyTower, 8, 16, White);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	b2d8      	uxtb	r0, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2d9      	uxtb	r1, r3
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <ssd1306_DrawIcyTowerModel+0x30>)
 8001fca:	f7ff ff63 	bl	8001e94 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8001fce:	f7ff fdab 	bl	8001b28 <ssd1306_UpdateScreen>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	08009404 	.word	0x08009404

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <HAL_MspInit+0x44>)
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fea:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <HAL_MspInit+0x44>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <HAL_MspInit+0x44>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_MspInit+0x44>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <HAL_MspInit+0x44>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6593      	str	r3, [r2, #88]	@ 0x58
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_MspInit+0x44>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a17      	ldr	r2, [pc, #92]	@ (80020a4 <HAL_SPI_MspInit+0x7c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d127      	bne.n	800209a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204a:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <HAL_SPI_MspInit+0x80>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	4a16      	ldr	r2, [pc, #88]	@ (80020a8 <HAL_SPI_MspInit+0x80>)
 8002050:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002054:	6613      	str	r3, [r2, #96]	@ 0x60
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_SPI_MspInit+0x80>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_SPI_MspInit+0x80>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <HAL_SPI_MspInit+0x80>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_SPI_MspInit+0x80>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800207a:	2338      	movs	r3, #56	@ 0x38
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208a:	2305      	movs	r3, #5
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <HAL_SPI_MspInit+0x84>)
 8002096:	f000 fc03 	bl	80028a0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	@ 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40013000 	.word	0x40013000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0ac      	sub	sp, #176	@ 0xb0
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2288      	movs	r2, #136	@ 0x88
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 fbb6 	bl	8006842 <memset>
  if(huart->Instance==USART2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a25      	ldr	r2, [pc, #148]	@ (8002170 <HAL_UART_MspInit+0xc0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d143      	bne.n	8002168 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 fcc9 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f8:	f7ff fc22 	bl	8001940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <HAL_UART_MspInit+0xc4>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	4a1c      	ldr	r2, [pc, #112]	@ (8002174 <HAL_UART_MspInit+0xc4>)
 8002102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002106:	6593      	str	r3, [r2, #88]	@ 0x58
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_UART_MspInit+0xc4>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_UART_MspInit+0xc4>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002118:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <HAL_UART_MspInit+0xc4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_UART_MspInit+0xc4>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800212c:	230c      	movs	r3, #12
 800212e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002144:	2307      	movs	r3, #7
 8002146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800214e:	4619      	mov	r1, r3
 8002150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002154:	f000 fba4 	bl	80028a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2101      	movs	r1, #1
 800215c:	2026      	movs	r0, #38	@ 0x26
 800215e:	f000 faea 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002162:	2026      	movs	r0, #38	@ 0x26
 8002164:	f000 fb03 	bl	800276e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002168:	bf00      	nop
 800216a:	37b0      	adds	r7, #176	@ 0xb0
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40004400 	.word	0x40004400
 8002174:	40021000 	.word	0x40021000

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <NMI_Handler+0x4>

08002180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <HardFault_Handler+0x4>

08002188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <MemManage_Handler+0x4>

08002190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <BusFault_Handler+0x4>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <UsageFault_Handler+0x4>

080021a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ce:	f000 f973 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <USART2_IRQHandler+0x10>)
 80021de:	f002 fe79 	bl	8004ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200000fc 	.word	0x200000fc

080021ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80021f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021f4:	f000 fd2e 	bl	8002c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_kill>:

int _kill(int pid, int sig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002216:	f004 fb63 	bl	80068e0 <__errno>
 800221a:	4603      	mov	r3, r0
 800221c:	2216      	movs	r2, #22
 800221e:	601a      	str	r2, [r3, #0]
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_exit>:

void _exit (int status)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffe7 	bl	800220c <_kill>
  while (1) {}    /* Make sure we hang here */
 800223e:	bf00      	nop
 8002240:	e7fd      	b.n	800223e <_exit+0x12>

08002242 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e00a      	b.n	800226a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002254:	f3af 8000 	nop.w
 8002258:	4601      	mov	r1, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	60ba      	str	r2, [r7, #8]
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	dbf0      	blt.n	8002254 <_read+0x12>
  }

  return len;
 8002272:	687b      	ldr	r3, [r7, #4]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e009      	b.n	80022a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60ba      	str	r2, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fd80 	bl	8000d9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbf1      	blt.n	800228e <_write+0x12>
  }
  return len;
 80022aa:	687b      	ldr	r3, [r7, #4]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_close>:

int _close(int file)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022dc:	605a      	str	r2, [r3, #4]
  return 0;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_isatty>:

int _isatty(int file)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002324:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <_sbrk+0x5c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <_sbrk+0x60>)
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <_sbrk+0x64>)
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <_sbrk+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d207      	bcs.n	800235c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800234c:	f004 fac8 	bl	80068e0 <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	220c      	movs	r2, #12
 8002354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	e009      	b.n	8002370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002362:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <_sbrk+0x64>)
 800236c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20018000 	.word	0x20018000
 800237c:	00000400 	.word	0x00000400
 8002380:	200006f4 	.word	0x200006f4
 8002384:	20000848 	.word	0x20000848

08002388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <SystemInit+0x20>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <SystemInit+0x20>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b0:	f7ff ffea 	bl	8002388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b4:	480c      	ldr	r0, [pc, #48]	@ (80023e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023b6:	490d      	ldr	r1, [pc, #52]	@ (80023ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <LoopForever+0xe>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023cc:	4c0a      	ldr	r4, [pc, #40]	@ (80023f8 <LoopForever+0x16>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023da:	f004 fa87 	bl	80068ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023de:	f7ff f8dd 	bl	800159c <main>

080023e2 <LoopForever>:

LoopForever:
    b LoopForever
 80023e2:	e7fe      	b.n	80023e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80023f0:	0800954c 	.word	0x0800954c
  ldr r2, =_sbss
 80023f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80023f8:	20000848 	.word	0x20000848

080023fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023fc:	e7fe      	b.n	80023fc <ADC1_2_IRQHandler>
	...

08002400 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <HAL_Init+0x3c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <HAL_Init+0x3c>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002416:	2003      	movs	r0, #3
 8002418:	f000 f982 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800241c:	2000      	movs	r0, #0
 800241e:	f000 f80f 	bl	8002440 <HAL_InitTick>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	e001      	b.n	8002432 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800242e:	f7ff fdd7 	bl	8001fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002432:	79fb      	ldrb	r3, [r7, #7]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40022000 	.word	0x40022000

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800244c:	4b17      	ldr	r3, [pc, #92]	@ (80024ac <HAL_InitTick+0x6c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d023      	beq.n	800249c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002454:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_InitTick+0x70>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_InitTick+0x6c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f98d 	bl	800278a <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d809      	bhi.n	8002490 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 f957 	bl	8002736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002488:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <HAL_InitTick+0x74>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e007      	b.n	80024a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e004      	b.n	80024a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e001      	b.n	80024a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000001c 	.word	0x2000001c
 80024b0:	20000014 	.word	0x20000014
 80024b4:	20000018 	.word	0x20000018

080024b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000001c 	.word	0x2000001c
 80024dc:	200006f8 	.word	0x200006f8

080024e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b03      	ldr	r3, [pc, #12]	@ (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200006f8 	.word	0x200006f8

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ffee 	bl	80024e0 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_Delay+0x44>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffde 	bl	80024e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000001c 	.word	0x2000001c

08002540 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_SuspendTick+0x1c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a04      	ldr	r2, [pc, #16]	@ (800255c <HAL_SuspendTick+0x1c>)
 800254a:	f023 0302 	bic.w	r3, r3, #2
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_ResumeTick+0x1c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <HAL_ResumeTick+0x1c>)
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	@ (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	@ (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	@ (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	@ 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026ec:	d301      	bcc.n	80026f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f2:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <SysTick_Config+0x40>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fa:	210f      	movs	r1, #15
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f7ff ff8e 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <SysTick_Config+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270a:	4b04      	ldr	r3, [pc, #16]	@ (800271c <SysTick_Config+0x40>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010

08002720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff29 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002748:	f7ff ff3e 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 800274c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	f7ff ff8e 	bl	8002674 <NVIC_EncodePriority>
 8002758:	4602      	mov	r2, r0
 800275a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff5d 	bl	8002620 <__NVIC_SetPriority>
}
 8002766:	bf00      	nop
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff31 	bl	80025e4 <__NVIC_EnableIRQ>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffa2 	bl	80026dc <SysTick_Config>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d008      	beq.n	80027cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e022      	b.n	8002812 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 020e 	bic.w	r2, r2, #14
 80027da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f0:	f003 021c 	and.w	r2, r3, #28
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d005      	beq.n	8002842 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2204      	movs	r2, #4
 800283a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e029      	b.n	8002896 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 020e 	bic.w	r2, r2, #14
 8002850:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f003 021c 	and.w	r2, r3, #28
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
    }
  }
  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ae:	e17f      	b.n	8002bb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8171 	beq.w	8002baa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d005      	beq.n	80028e0 <HAL_GPIO_Init+0x40>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d130      	bne.n	8002942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002916:	2201      	movs	r2, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0201 	and.w	r2, r3, #1
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b03      	cmp	r3, #3
 800294c:	d118      	bne.n	8002980 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002954:	2201      	movs	r2, #1
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	f003 0201 	and.w	r2, r3, #1
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d017      	beq.n	80029bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d123      	bne.n	8002a10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	6939      	ldr	r1, [r7, #16]
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80ac 	beq.w	8002baa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd0 <HAL_GPIO_Init+0x330>)
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd0 <HAL_GPIO_Init+0x330>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_GPIO_Init+0x330>)
 8002a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd4 <HAL_GPIO_Init+0x334>)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a94:	d025      	beq.n	8002ae2 <HAL_GPIO_Init+0x242>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4f      	ldr	r2, [pc, #316]	@ (8002bd8 <HAL_GPIO_Init+0x338>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <HAL_GPIO_Init+0x23e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8002bdc <HAL_GPIO_Init+0x33c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d019      	beq.n	8002ada <HAL_GPIO_Init+0x23a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8002be0 <HAL_GPIO_Init+0x340>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_GPIO_Init+0x236>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8002be4 <HAL_GPIO_Init+0x344>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_GPIO_Init+0x232>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8002be8 <HAL_GPIO_Init+0x348>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0x22e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bec <HAL_GPIO_Init+0x34c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_GPIO_Init+0x22a>
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	e00c      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002aca:	2307      	movs	r3, #7
 8002acc:	e00a      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ace:	2305      	movs	r3, #5
 8002ad0:	e008      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	e006      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e004      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e002      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	f002 0203 	and.w	r2, r2, #3
 8002aea:	0092      	lsls	r2, r2, #2
 8002aec:	4093      	lsls	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002af4:	4937      	ldr	r1, [pc, #220]	@ (8002bd4 <HAL_GPIO_Init+0x334>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b02:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b26:	4a32      	ldr	r2, [pc, #200]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b2c:	4b30      	ldr	r3, [pc, #192]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b50:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b56:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ba4:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f47f ae78 	bne.w	80028b0 <HAL_GPIO_Init+0x10>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	48000400 	.word	0x48000400
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	48000c00 	.word	0x48000c00
 8002be4:	48001000 	.word	0x48001000
 8002be8:	48001400 	.word	0x48001400
 8002bec:	48001800 	.word	0x48001800
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fbf4 	bl	8001460 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	43db      	mvns	r3, r3
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	4908      	ldr	r1, [pc, #32]	@ (8002cc0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	4904      	ldr	r1, [pc, #16]	@ (8002cc0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]


}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40007000 	.word	0x40007000

08002cc4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002cd6:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce2:	d10e      	bne.n	8002d02 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002ce4:	f000 f896 	bl	8002e14 <HAL_PWREx_DisableLowPowerRunMode>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8002cee:	e016      	b.n	8002d1e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cfc:	d001      	beq.n	8002d02 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002cfe:	f000 f879 	bl	8002df4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002d14:	bf30      	wfi
 8002d16:	e002      	b.n	8002d1e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002d18:	bf40      	sev
    __WFE();
 8002d1a:	bf20      	wfe
    __WFE();
 8002d1c:	bf20      	wfe
  }

}
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40007000 	.word	0x40007000
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40007000 	.word	0x40007000

08002d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d56:	d130      	bne.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d58:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d64:	d038      	beq.n	8002dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d76:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2232      	movs	r2, #50	@ 0x32
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	4a1b      	ldr	r2, [pc, #108]	@ (8002df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0c9b      	lsrs	r3, r3, #18
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d8c:	e002      	b.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da0:	d102      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f2      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002da8:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db4:	d110      	bne.n	8002dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e00f      	b.n	8002dda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dba:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc6:	d007      	beq.n	8002dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dd0:	4a05      	ldr	r2, [pc, #20]	@ (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40007000 	.word	0x40007000
 8002dec:	20000014 	.word	0x20000014
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002df8:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	@ (8002e10 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40007000 	.word	0x40007000

08002e14 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a16      	ldr	r2, [pc, #88]	@ (8002e78 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002e20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e24:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e26:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2232      	movs	r2, #50	@ 0x32
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	3301      	adds	r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002e3c:	e002      	b.n	8002e44 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e50:	d102      	bne.n	8002e58 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f2      	bne.n	8002e3e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e64:	d101      	bne.n	8002e6a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e000      	b.n	8002e6c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	20000014 	.word	0x20000014
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e3ca      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e96:	4b97      	ldr	r3, [pc, #604]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea0:	4b94      	ldr	r3, [pc, #592]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80e4 	beq.w	8003080 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_RCC_OscConfig+0x4a>
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	f040 808b 	bne.w	8002fdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 8087 	bne.w	8002fdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ece:	4b89      	ldr	r3, [pc, #548]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e3a2      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	4b82      	ldr	r3, [pc, #520]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_RCC_OscConfig+0x7c>
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002efe:	e005      	b.n	8002f0c <HAL_RCC_OscConfig+0x88>
 8002f00:	4b7c      	ldr	r3, [pc, #496]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d223      	bcs.n	8002f58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fd55 	bl	80039c4 <RCC_SetFlashLatencyFromMSIRange>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e383      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f24:	4b73      	ldr	r3, [pc, #460]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a72      	ldr	r2, [pc, #456]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b70      	ldr	r3, [pc, #448]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	496d      	ldr	r1, [pc, #436]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f42:	4b6c      	ldr	r3, [pc, #432]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	4968      	ldr	r1, [pc, #416]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
 8002f56:	e025      	b.n	8002fa4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f58:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	f043 0308 	orr.w	r3, r3, #8
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	4960      	ldr	r1, [pc, #384]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f76:	4b5f      	ldr	r3, [pc, #380]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	495b      	ldr	r1, [pc, #364]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fd15 	bl	80039c4 <RCC_SetFlashLatencyFromMSIRange>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e343      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa4:	f000 fc4a 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b52      	ldr	r3, [pc, #328]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	4950      	ldr	r1, [pc, #320]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80030fc <HAL_RCC_OscConfig+0x278>)
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fc4:	4b4e      	ldr	r3, [pc, #312]	@ (8003100 <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fa39 	bl	8002440 <HAL_InitTick>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d052      	beq.n	800307e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	e327      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d032      	beq.n	800304a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe4:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a42      	ldr	r2, [pc, #264]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ff0:	f7ff fa76 	bl	80024e0 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff8:	f7ff fa72 	bl	80024e0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e310      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300a:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003016:	4b37      	ldr	r3, [pc, #220]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a36      	ldr	r2, [pc, #216]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4931      	ldr	r1, [pc, #196]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003034:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	492c      	ldr	r1, [pc, #176]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e01a      	b.n	8003080 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800304a:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a29      	ldr	r2, [pc, #164]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003056:	f7ff fa43 	bl	80024e0 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800305e:	f7ff fa3f 	bl	80024e0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e2dd      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003070:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x1da>
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800307e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d074      	beq.n	8003176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d005      	beq.n	800309e <HAL_RCC_OscConfig+0x21a>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d10e      	bne.n	80030b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d10b      	bne.n	80030b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d064      	beq.n	8003174 <HAL_RCC_OscConfig+0x2f0>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d160      	bne.n	8003174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e2ba      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x24a>
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e026      	b.n	800311c <HAL_RCC_OscConfig+0x298>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d6:	d115      	bne.n	8003104 <HAL_RCC_OscConfig+0x280>
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a02      	ldr	r2, [pc, #8]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e014      	b.n	800311c <HAL_RCC_OscConfig+0x298>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08009414 	.word	0x08009414
 80030fc:	20000014 	.word	0x20000014
 8003100:	20000018 	.word	0x20000018
 8003104:	4ba0      	ldr	r3, [pc, #640]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a9f      	ldr	r2, [pc, #636]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b9d      	ldr	r3, [pc, #628]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a9c      	ldr	r2, [pc, #624]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7ff f9dc 	bl	80024e0 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7ff f9d8 	bl	80024e0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	@ 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e276      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4b92      	ldr	r3, [pc, #584]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x2a8>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7ff f9c8 	bl	80024e0 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7ff f9c4 	bl	80024e0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	@ 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e262      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	4b88      	ldr	r3, [pc, #544]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d0>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d060      	beq.n	8003244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d005      	beq.n	8003194 <HAL_RCC_OscConfig+0x310>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d119      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d116      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x328>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e23f      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	4973      	ldr	r1, [pc, #460]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c0:	e040      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d023      	beq.n	8003212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7ff f983 	bl	80024e0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7ff f97f 	bl	80024e0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e21d      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b65      	ldr	r3, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b62      	ldr	r3, [pc, #392]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	495f      	ldr	r1, [pc, #380]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
 8003210:	e018      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b5d      	ldr	r3, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7ff f95f 	bl	80024e0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7ff f95b 	bl	80024e0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1f9      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003238:	4b53      	ldr	r3, [pc, #332]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003258:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	4a4a      	ldr	r2, [pc, #296]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7ff f93a 	bl	80024e0 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7ff f936 	bl	80024e0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1d4      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003282:	4b41      	ldr	r3, [pc, #260]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x3ec>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003298:	4a3b      	ldr	r2, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7ff f91d 	bl	80024e0 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7ff f919 	bl	80024e0 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1b7      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032bc:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a6 	beq.w	8003424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003304:	4b21      	ldr	r3, [pc, #132]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d118      	bne.n	8003342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331c:	f7ff f8e0 	bl	80024e0 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7ff f8dc 	bl	80024e0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e17a      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <HAL_RCC_OscConfig+0x4d8>
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800335a:	e029      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d115      	bne.n	8003390 <HAL_RCC_OscConfig+0x50c>
 8003364:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	4a03      	ldr	r2, [pc, #12]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003384:	e014      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	4b9c      	ldr	r3, [pc, #624]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	4a9b      	ldr	r2, [pc, #620]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033a0:	4b98      	ldr	r3, [pc, #608]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	4a97      	ldr	r2, [pc, #604]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7ff f892 	bl	80024e0 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7ff f88e 	bl	80024e0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e12a      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ed      	beq.n	80033c0 <HAL_RCC_OscConfig+0x53c>
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7ff f87b 	bl	80024e0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7ff f877 	bl	80024e0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e113      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ed      	bne.n	80033ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b7a      	ldr	r3, [pc, #488]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	4a79      	ldr	r2, [pc, #484]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80fe 	beq.w	800362a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	2b02      	cmp	r3, #2
 8003434:	f040 80d0 	bne.w	80035d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003438:	4b72      	ldr	r3, [pc, #456]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	429a      	cmp	r2, r3
 800344a:	d130      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	3b01      	subs	r3, #1
 8003458:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d127      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11f      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003478:	2a07      	cmp	r2, #7
 800347a:	bf14      	ite	ne
 800347c:	2201      	movne	r2, #1
 800347e:	2200      	moveq	r2, #0
 8003480:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003482:	4293      	cmp	r3, r2
 8003484:	d113      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d109      	bne.n	80034ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d06e      	beq.n	800358c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	d069      	beq.n	8003588 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034b4:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034c0:	4b50      	ldr	r3, [pc, #320]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0ad      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034dc:	f7ff f800 	bl	80024e0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fffc 	bl	80024e0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e09a      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f6:	4b43      	ldr	r3, [pc, #268]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003502:	4b40      	ldr	r3, [pc, #256]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003512:	3a01      	subs	r2, #1
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	4311      	orrs	r1, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800351c:	0212      	lsls	r2, r2, #8
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003524:	0852      	lsrs	r2, r2, #1
 8003526:	3a01      	subs	r2, #1
 8003528:	0552      	lsls	r2, r2, #21
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003530:	0852      	lsrs	r2, r2, #1
 8003532:	3a01      	subs	r2, #1
 8003534:	0652      	lsls	r2, r2, #25
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800353c:	0912      	lsrs	r2, r2, #4
 800353e:	0452      	lsls	r2, r2, #17
 8003540:	430a      	orrs	r2, r1
 8003542:	4930      	ldr	r1, [pc, #192]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003544:	4313      	orrs	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003548:	4b2e      	ldr	r3, [pc, #184]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2d      	ldr	r2, [pc, #180]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800354e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003552:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003554:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4a2a      	ldr	r2, [pc, #168]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800355a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800355e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003560:	f7fe ffbe 	bl	80024e0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe ffba 	bl	80024e0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e058      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003586:	e050      	b.n	800362a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e04f      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358c:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d148      	bne.n	800362a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003598:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a19      	ldr	r2, [pc, #100]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a4:	4b17      	ldr	r3, [pc, #92]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b0:	f7fe ff96 	bl	80024e0 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe ff92 	bl	80024e0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e030      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x734>
 80035d6:	e028      	b.n	800362a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d023      	beq.n	8003626 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <HAL_RCC_OscConfig+0x780>)
 80035e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe ff79 	bl	80024e0 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	e00c      	b.n	800360c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe ff75 	bl	80024e0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d905      	bls.n	800360c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e013      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
 8003604:	40021000 	.word	0x40021000
 8003608:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_RCC_OscConfig+0x7b0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ec      	bne.n	80035f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_RCC_OscConfig+0x7b0>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4905      	ldr	r1, [pc, #20]	@ (8003634 <HAL_RCC_OscConfig+0x7b0>)
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_RCC_OscConfig+0x7b4>)
 8003620:	4013      	ands	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
 8003624:	e001      	b.n	800362a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	feeefffc 	.word	0xfeeefffc

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0e7      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003650:	4b75      	ldr	r3, [pc, #468]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d910      	bls.n	8003680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b72      	ldr	r3, [pc, #456]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4970      	ldr	r1, [pc, #448]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b6e      	ldr	r3, [pc, #440]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0cf      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4b66      	ldr	r3, [pc, #408]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003698:	429a      	cmp	r2, r3
 800369a:	d908      	bls.n	80036ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b63      	ldr	r3, [pc, #396]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4960      	ldr	r1, [pc, #384]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04c      	beq.n	8003754 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c2:	4b5a      	ldr	r3, [pc, #360]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d121      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0a6      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036da:	4b54      	ldr	r3, [pc, #336]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e09a      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f2:	4b4e      	ldr	r3, [pc, #312]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e08e      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003702:	4b4a      	ldr	r3, [pc, #296]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e086      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b46      	ldr	r3, [pc, #280]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4943      	ldr	r1, [pc, #268]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fe fedc 	bl	80024e0 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe fed8 	bl	80024e0 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e06e      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b3a      	ldr	r3, [pc, #232]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	4b31      	ldr	r3, [pc, #196]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800376c:	429a      	cmp	r2, r3
 800376e:	d208      	bcs.n	8003782 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b2e      	ldr	r3, [pc, #184]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	492b      	ldr	r1, [pc, #172]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003782:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d210      	bcs.n	80037b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003790:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 0207 	bic.w	r2, r3, #7
 8003798:	4923      	ldr	r1, [pc, #140]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a0:	4b21      	ldr	r3, [pc, #132]	@ (8003828 <HAL_RCC_ClockConfig+0x1ec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e036      	b.n	8003820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037be:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4918      	ldr	r1, [pc, #96]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4910      	ldr	r1, [pc, #64]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f0:	f000 f824 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	490b      	ldr	r1, [pc, #44]	@ (8003830 <HAL_RCC_ClockConfig+0x1f4>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	4a09      	ldr	r2, [pc, #36]	@ (8003834 <HAL_RCC_ClockConfig+0x1f8>)
 800380e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_ClockConfig+0x1fc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fe13 	bl	8002440 <HAL_InitTick>
 800381a:	4603      	mov	r3, r0
 800381c:	72fb      	strb	r3, [r7, #11]

  return status;
 800381e:	7afb      	ldrb	r3, [r7, #11]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40022000 	.word	0x40022000
 800382c:	40021000 	.word	0x40021000
 8003830:	08009414 	.word	0x08009414
 8003834:	20000014 	.word	0x20000014
 8003838:	20000018 	.word	0x20000018

0800383c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384a:	4b3e      	ldr	r3, [pc, #248]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003854:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x34>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d121      	bne.n	80038ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11e      	bne.n	80038ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003870:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800387c:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	e005      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800388c:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x10c>)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d102      	bne.n	80038ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_GetSysClockFreq+0x110>)
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e004      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c0:	4b23      	ldr	r3, [pc, #140]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x114>)
 80038c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d134      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d003      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0xac>
 80038e0:	e005      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <HAL_RCC_GetSysClockFreq+0x110>)
 80038e4:	617b      	str	r3, [r7, #20]
      break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ea:	617b      	str	r3, [r7, #20]
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	617b      	str	r3, [r7, #20]
      break;
 80038f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	3301      	adds	r3, #1
 8003900:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	fb03 f202 	mul.w	r2, r3, r2
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x108>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	0e5b      	lsrs	r3, r3, #25
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	3301      	adds	r3, #1
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003932:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003934:	69bb      	ldr	r3, [r7, #24]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	@ 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	0800942c 	.word	0x0800942c
 800394c:	00f42400 	.word	0x00f42400
 8003950:	007a1200 	.word	0x007a1200

08003954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <HAL_RCC_GetHCLKFreq+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000014 	.word	0x20000014

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003970:	f7ff fff0 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4904      	ldr	r1, [pc, #16]	@ (8003994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	08009424 	.word	0x08009424

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800399c:	f7ff ffda 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0adb      	lsrs	r3, r3, #11
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4904      	ldr	r1, [pc, #16]	@ (80039c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	08009424 	.word	0x08009424

080039c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039d0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039dc:	f7ff f9a6 	bl	8002d2c <HAL_PWREx_GetVoltageRange>
 80039e0:	6178      	str	r0, [r7, #20]
 80039e2:	e014      	b.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b25      	ldr	r3, [pc, #148]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e8:	4a24      	ldr	r2, [pc, #144]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f0:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039fc:	f7ff f996 	bl	8002d2c <HAL_PWREx_GetVoltageRange>
 8003a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	4a1d      	ldr	r2, [pc, #116]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a14:	d10b      	bne.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b80      	cmp	r3, #128	@ 0x80
 8003a1a:	d919      	bls.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a20:	d902      	bls.n	8003a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a22:	2302      	movs	r3, #2
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e013      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a28:	2301      	movs	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e010      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b80      	cmp	r3, #128	@ 0x80
 8003a32:	d902      	bls.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a34:	2303      	movs	r3, #3
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e00a      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b80      	cmp	r3, #128	@ 0x80
 8003a3e:	d102      	bne.n	8003a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a40:	2302      	movs	r3, #2
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e004      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b70      	cmp	r3, #112	@ 0x70
 8003a4a:	d101      	bne.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 0207 	bic.w	r2, r3, #7
 8003a58:	4909      	ldr	r1, [pc, #36]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a60:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40022000 	.word	0x40022000

08003a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a90:	2300      	movs	r3, #0
 8003a92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d041      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aa8:	d02a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003aaa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aae:	d824      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ab6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aba:	d81e      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac4:	d010      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ac6:	e018      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ac8:	4b86      	ldr	r3, [pc, #536]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a85      	ldr	r2, [pc, #532]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad4:	e015      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fabb 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae6:	e00c      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3320      	adds	r3, #32
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fba6 	bl	8004240 <RCCEx_PLLSAI2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af8:	e003      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	74fb      	strb	r3, [r7, #19]
      break;
 8003afe:	e000      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b08:	4b76      	ldr	r3, [pc, #472]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b16:	4973      	ldr	r1, [pc, #460]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b1e:	e001      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d041      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b38:	d02a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b3e:	d824      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b44:	d008      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b4a:	d81e      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b54:	d010      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b56:	e018      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b58:	4b62      	ldr	r3, [pc, #392]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a61      	ldr	r2, [pc, #388]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b64:	e015      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fa73 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b76:	e00c      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3320      	adds	r3, #32
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fb5e 	bl	8004240 <RCCEx_PLLSAI2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b98:	4b52      	ldr	r3, [pc, #328]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba6:	494f      	ldr	r1, [pc, #316]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bae:	e001      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a0 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	4a40      	ldr	r2, [pc, #256]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003be8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c04:	f7fe fc6c 	bl	80024e0 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c0a:	e009      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0c:	f7fe fc68 	bl	80024e0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d902      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c20:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d15c      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01f      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d019      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c50:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c62:	4a20      	ldr	r2, [pc, #128]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fc27 	bl	80024e0 <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c94:	e00b      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe fc23 	bl	80024e0 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d902      	bls.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	74fb      	strb	r3, [r7, #19]
            break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ec      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc2:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd2:	4904      	ldr	r1, [pc, #16]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf0:	7c7b      	ldrb	r3, [r7, #17]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b9e      	ldr	r3, [pc, #632]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	4a9d      	ldr	r2, [pc, #628]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0e:	4b98      	ldr	r3, [pc, #608]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	4994      	ldr	r1, [pc, #592]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d30:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f023 020c 	bic.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3e:	498c      	ldr	r1, [pc, #560]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d52:	4b87      	ldr	r3, [pc, #540]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	4983      	ldr	r1, [pc, #524]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d74:	4b7e      	ldr	r3, [pc, #504]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	497b      	ldr	r1, [pc, #492]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d96:	4b76      	ldr	r3, [pc, #472]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	4972      	ldr	r1, [pc, #456]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db8:	4b6d      	ldr	r3, [pc, #436]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	496a      	ldr	r1, [pc, #424]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dda:	4b65      	ldr	r3, [pc, #404]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	4961      	ldr	r1, [pc, #388]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0a:	4959      	ldr	r1, [pc, #356]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e1e:	4b54      	ldr	r3, [pc, #336]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2c:	4950      	ldr	r1, [pc, #320]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e40:	4b4b      	ldr	r3, [pc, #300]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4e:	4948      	ldr	r1, [pc, #288]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e62:	4b43      	ldr	r3, [pc, #268]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	493f      	ldr	r1, [pc, #252]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d028      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e84:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e92:	4937      	ldr	r1, [pc, #220]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea4:	4b32      	ldr	r3, [pc, #200]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a31      	ldr	r2, [pc, #196]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eae:	60d3      	str	r3, [r2, #12]
 8003eb0:	e011      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f8c8 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d028      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ee2:	4b23      	ldr	r3, [pc, #140]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef0:	491f      	ldr	r1, [pc, #124]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f00:	d106      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0c:	60d3      	str	r3, [r2, #12]
 8003f0e:	e011      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f899 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4e:	4908      	ldr	r1, [pc, #32]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f5e:	d109      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b03      	ldr	r3, [pc, #12]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a02      	ldr	r2, [pc, #8]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
 8003f6c:	e014      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f867 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d02f      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb2:	4928      	ldr	r1, [pc, #160]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f844 	bl	8004058 <RCCEx_PLLSAI1_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d014      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	74bb      	strb	r3, [r7, #18]
 8003fde:	e011      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3320      	adds	r3, #32
 8003fee:	2102      	movs	r1, #2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f925 	bl	8004240 <RCCEx_PLLSAI2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ffa:	7cfb      	ldrb	r3, [r7, #19]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004010:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401e:	490d      	ldr	r1, [pc, #52]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004032:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004038:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004042:	4904      	ldr	r1, [pc, #16]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800404a:	7cbb      	ldrb	r3, [r7, #18]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000

08004058 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004066:	4b75      	ldr	r3, [pc, #468]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d018      	beq.n	80040a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004072:	4b72      	ldr	r3, [pc, #456]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0203 	and.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d10d      	bne.n	800409e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
       ||
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800408a:	4b6c      	ldr	r3, [pc, #432]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
       ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d047      	beq.n	800412e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e044      	b.n	800412e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d018      	beq.n	80040de <RCCEx_PLLSAI1_Config+0x86>
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d825      	bhi.n	80040fc <RCCEx_PLLSAI1_Config+0xa4>
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d002      	beq.n	80040ba <RCCEx_PLLSAI1_Config+0x62>
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d009      	beq.n	80040cc <RCCEx_PLLSAI1_Config+0x74>
 80040b8:	e020      	b.n	80040fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ba:	4b60      	ldr	r3, [pc, #384]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11d      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ca:	e01a      	b.n	8004102 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040cc:	4b5b      	ldr	r3, [pc, #364]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d116      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040dc:	e013      	b.n	8004106 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040de:	4b57      	ldr	r3, [pc, #348]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ea:	4b54      	ldr	r3, [pc, #336]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040fa:	e006      	b.n	800410a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004100:	e004      	b.n	800410c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800410a:	bf00      	nop
    }

    if(status == HAL_OK)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004112:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	430b      	orrs	r3, r1
 8004128:	4944      	ldr	r1, [pc, #272]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d17d      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004134:	4b41      	ldr	r3, [pc, #260]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a40      	ldr	r2, [pc, #256]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800413a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800413e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004140:	f7fe f9ce 	bl	80024e0 <HAL_GetTick>
 8004144:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004146:	e009      	b.n	800415c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004148:	f7fe f9ca 	bl	80024e0 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d902      	bls.n	800415c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	73fb      	strb	r3, [r7, #15]
        break;
 800415a:	e005      	b.n	8004168 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800415c:	4b37      	ldr	r3, [pc, #220]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ef      	bne.n	8004148 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d160      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d111      	bne.n	8004198 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004174:	4b31      	ldr	r3, [pc, #196]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800417c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6892      	ldr	r2, [r2, #8]
 8004184:	0211      	lsls	r1, r2, #8
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68d2      	ldr	r2, [r2, #12]
 800418a:	0912      	lsrs	r2, r2, #4
 800418c:	0452      	lsls	r2, r2, #17
 800418e:	430a      	orrs	r2, r1
 8004190:	492a      	ldr	r1, [pc, #168]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	610b      	str	r3, [r1, #16]
 8004196:	e027      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d112      	bne.n	80041c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800419e:	4b27      	ldr	r3, [pc, #156]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6892      	ldr	r2, [r2, #8]
 80041ae:	0211      	lsls	r1, r2, #8
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6912      	ldr	r2, [r2, #16]
 80041b4:	0852      	lsrs	r2, r2, #1
 80041b6:	3a01      	subs	r2, #1
 80041b8:	0552      	lsls	r2, r2, #21
 80041ba:	430a      	orrs	r2, r1
 80041bc:	491f      	ldr	r1, [pc, #124]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	610b      	str	r3, [r1, #16]
 80041c2:	e011      	b.n	80041e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c4:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	0211      	lsls	r1, r2, #8
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6952      	ldr	r2, [r2, #20]
 80041da:	0852      	lsrs	r2, r2, #1
 80041dc:	3a01      	subs	r2, #1
 80041de:	0652      	lsls	r2, r2, #25
 80041e0:	430a      	orrs	r2, r1
 80041e2:	4916      	ldr	r1, [pc, #88]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041e8:	4b14      	ldr	r3, [pc, #80]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a13      	ldr	r2, [pc, #76]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe f974 	bl	80024e0 <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041fa:	e009      	b.n	8004210 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041fc:	f7fe f970 	bl	80024e0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	73fb      	strb	r3, [r7, #15]
          break;
 800420e:	e005      	b.n	800421c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004210:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4904      	ldr	r1, [pc, #16]	@ (800423c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000

08004240 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800424e:	4b6a      	ldr	r3, [pc, #424]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d018      	beq.n	800428c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800425a:	4b67      	ldr	r3, [pc, #412]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0203 	and.w	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d10d      	bne.n	8004286 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
       ||
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004272:	4b61      	ldr	r3, [pc, #388]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
       ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d047      	beq.n	8004316 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	e044      	b.n	8004316 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d018      	beq.n	80042c6 <RCCEx_PLLSAI2_Config+0x86>
 8004294:	2b03      	cmp	r3, #3
 8004296:	d825      	bhi.n	80042e4 <RCCEx_PLLSAI2_Config+0xa4>
 8004298:	2b01      	cmp	r3, #1
 800429a:	d002      	beq.n	80042a2 <RCCEx_PLLSAI2_Config+0x62>
 800429c:	2b02      	cmp	r3, #2
 800429e:	d009      	beq.n	80042b4 <RCCEx_PLLSAI2_Config+0x74>
 80042a0:	e020      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042a2:	4b55      	ldr	r3, [pc, #340]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e01a      	b.n	80042ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b4:	4b50      	ldr	r3, [pc, #320]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c4:	e013      	b.n	80042ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042c6:	4b4c      	ldr	r3, [pc, #304]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042d2:	4b49      	ldr	r3, [pc, #292]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042e2:	e006      	b.n	80042f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e004      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042fa:	4b3f      	ldr	r3, [pc, #252]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	430b      	orrs	r3, r1
 8004310:	4939      	ldr	r1, [pc, #228]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d167      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800431c:	4b36      	ldr	r3, [pc, #216]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a35      	ldr	r2, [pc, #212]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fe f8da 	bl	80024e0 <HAL_GetTick>
 800432c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800432e:	e009      	b.n	8004344 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004330:	f7fe f8d6 	bl	80024e0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d902      	bls.n	8004344 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	73fb      	strb	r3, [r7, #15]
        break;
 8004342:	e005      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004344:	4b2c      	ldr	r3, [pc, #176]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ef      	bne.n	8004330 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d14a      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d111      	bne.n	8004380 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800435c:	4b26      	ldr	r3, [pc, #152]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6892      	ldr	r2, [r2, #8]
 800436c:	0211      	lsls	r1, r2, #8
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68d2      	ldr	r2, [r2, #12]
 8004372:	0912      	lsrs	r2, r2, #4
 8004374:	0452      	lsls	r2, r2, #17
 8004376:	430a      	orrs	r2, r1
 8004378:	491f      	ldr	r1, [pc, #124]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	614b      	str	r3, [r1, #20]
 800437e:	e011      	b.n	80043a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004380:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004388:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6892      	ldr	r2, [r2, #8]
 8004390:	0211      	lsls	r1, r2, #8
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6912      	ldr	r2, [r2, #16]
 8004396:	0852      	lsrs	r2, r2, #1
 8004398:	3a01      	subs	r2, #1
 800439a:	0652      	lsls	r2, r2, #25
 800439c:	430a      	orrs	r2, r1
 800439e:	4916      	ldr	r1, [pc, #88]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043a4:	4b14      	ldr	r3, [pc, #80]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a13      	ldr	r2, [pc, #76]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fe f896 	bl	80024e0 <HAL_GetTick>
 80043b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043b6:	e009      	b.n	80043cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043b8:	f7fe f892 	bl	80024e0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d902      	bls.n	80043cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	73fb      	strb	r3, [r7, #15]
          break;
 80043ca:	e005      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043cc:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ef      	beq.n	80043b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043de:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	4904      	ldr	r1, [pc, #16]	@ (80043f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000

080043fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e095      	b.n	800453a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800441e:	d009      	beq.n	8004434 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	61da      	str	r2, [r3, #28]
 8004426:	e005      	b.n	8004434 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fdea 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800446a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004474:	d902      	bls.n	800447c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e002      	b.n	8004482 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800447c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004480:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800448a:	d007      	beq.n	800449c <HAL_SPI_Init+0xa0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004494:	d002      	beq.n	800449c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044de:	ea42 0103 	orr.w	r1, r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	f003 0204 	and.w	r2, r3, #4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004518:	ea42 0103 	orr.w	r1, r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b088      	sub	sp, #32
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004552:	f7fd ffc5 	bl	80024e0 <HAL_GetTick>
 8004556:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d001      	beq.n	800456c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004568:	2302      	movs	r3, #2
 800456a:	e15c      	b.n	8004826 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_Transmit+0x36>
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e154      	b.n	8004826 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_SPI_Transmit+0x48>
 8004586:	2302      	movs	r3, #2
 8004588:	e14d      	b.n	8004826 <HAL_SPI_Transmit+0x2e4>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2203      	movs	r2, #3
 8004596:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045dc:	d10f      	bne.n	80045fe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b40      	cmp	r3, #64	@ 0x40
 800460a:	d007      	beq.n	800461c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004624:	d952      	bls.n	80046cc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0xf2>
 800462e:	8b7b      	ldrh	r3, [r7, #26]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d145      	bne.n	80046c0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004638:	881a      	ldrh	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004658:	e032      	b.n	80046c0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d112      	bne.n	800468e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800468c:	e018      	b.n	80046c0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468e:	f7fd ff27 	bl	80024e0 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d803      	bhi.n	80046a6 <HAL_SPI_Transmit+0x164>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d102      	bne.n	80046ac <HAL_SPI_Transmit+0x16a>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0b2      	b.n	8004826 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1c7      	bne.n	800465a <HAL_SPI_Transmit+0x118>
 80046ca:	e083      	b.n	80047d4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_SPI_Transmit+0x198>
 80046d4:	8b7b      	ldrh	r3, [r7, #26]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d177      	bne.n	80047ca <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d912      	bls.n	800470a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b02      	subs	r3, #2
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004708:	e05f      	b.n	80047ca <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	7812      	ldrb	r2, [r2, #0]
 8004716:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004730:	e04b      	b.n	80047ca <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d12b      	bne.n	8004798 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d912      	bls.n	8004770 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	881a      	ldrh	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	1c9a      	adds	r2, r3, #2
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b02      	subs	r3, #2
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800476e:	e02c      	b.n	80047ca <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	7812      	ldrb	r2, [r2, #0]
 800477c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004796:	e018      	b.n	80047ca <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004798:	f7fd fea2 	bl	80024e0 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d803      	bhi.n	80047b0 <HAL_SPI_Transmit+0x26e>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d102      	bne.n	80047b6 <HAL_SPI_Transmit+0x274>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e02d      	b.n	8004826 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ae      	bne.n	8004732 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f947 	bl	8004a6c <SPI_EndRxTxTransaction>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004824:	2300      	movs	r3, #0
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004840:	f7fd fe4e 	bl	80024e0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4413      	add	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004850:	f7fd fe46 	bl	80024e0 <HAL_GetTick>
 8004854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004856:	4b39      	ldr	r3, [pc, #228]	@ (800493c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	015b      	lsls	r3, r3, #5
 800485c:	0d1b      	lsrs	r3, r3, #20
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004866:	e054      	b.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d050      	beq.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004870:	f7fd fe36 	bl	80024e0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	429a      	cmp	r2, r3
 800487e:	d902      	bls.n	8004886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d13d      	bne.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800489e:	d111      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a8:	d004      	beq.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b2:	d107      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048cc:	d10f      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e017      	b.n	8004932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	3b01      	subs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d19b      	bne.n	8004868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000014 	.word	0x20000014

08004940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004952:	f7fd fdc5 	bl	80024e0 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	4413      	add	r3, r2
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004962:	f7fd fdbd 	bl	80024e0 <HAL_GetTick>
 8004966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004970:	4b3d      	ldr	r3, [pc, #244]	@ (8004a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	00da      	lsls	r2, r3, #3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	0d1b      	lsrs	r3, r3, #20
 8004980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004988:	e060      	b.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004990:	d107      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d050      	beq.n	8004a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049aa:	f7fd fd99 	bl	80024e0 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d902      	bls.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13d      	bne.n	8004a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049d8:	d111      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e2:	d004      	beq.n	80049ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ec:	d107      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a06:	d10f      	bne.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e010      	b.n	8004a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d196      	bne.n	800498a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	@ 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000014 	.word	0x20000014

08004a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff5b 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e027      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	@ 0x80
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fec0 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e014      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff34 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e000      	b.n	8004af0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e040      	b.n	8004b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fac8 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	@ 0x24
 8004b24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 ffb0 	bl	8005aa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fcf5 	bl	8005534 <UART_SetConfig>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e01b      	b.n	8004b8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f001 f82f 	bl	8005be8 <UART_CheckIdleState>
 8004b8a:	4603      	mov	r3, r0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	@ 0x28
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d177      	bne.n	8004c9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_UART_Transmit+0x24>
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e070      	b.n	8004c9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2221      	movs	r2, #33	@ 0x21
 8004bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bca:	f7fd fc89 	bl	80024e0 <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d108      	bne.n	8004bfc <HAL_UART_Transmit+0x68>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e003      	b.n	8004c04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c04:	e02f      	b.n	8004c66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f001 f891 	bl	8005d38 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e03b      	b.n	8004c9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10b      	bne.n	8004c44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c38:	b292      	uxth	r2, r2
 8004c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	3302      	adds	r3, #2
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e007      	b.n	8004c54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1c9      	bne.n	8004c06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2140      	movs	r1, #64	@ 0x40
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f001 f85b 	bl	8005d38 <UART_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e005      	b.n	8004c9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d137      	bne.n	8004d30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Receive_IT+0x24>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e030      	b.n	8004d32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a18      	ldr	r2, [pc, #96]	@ (8004d3c <HAL_UART_Receive_IT+0x94>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d01f      	beq.n	8004d20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d018      	beq.n	8004d20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	69f9      	ldr	r1, [r7, #28]
 8004d12:	6a3a      	ldr	r2, [r7, #32]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e6      	bne.n	8004cee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	461a      	mov	r2, r3
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f001 f874 	bl	8005e14 <UART_Start_Receive_IT>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	e000      	b.n	8004d32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3728      	adds	r7, #40	@ 0x28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40008000 	.word	0x40008000

08004d40 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b09a      	sub	sp, #104	@ 0x68
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d66:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e6      	bne.n	8004d48 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3308      	adds	r3, #8
 8004d80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3308      	adds	r3, #8
 8004d98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e5      	bne.n	8004d7a <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d118      	bne.n	8004de8 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f023 0310 	bic.w	r3, r3, #16
 8004dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dd6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e6      	bne.n	8004db6 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d151      	bne.n	8004e9a <HAL_UART_AbortReceive_IT+0x15a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e16:	61ba      	str	r2, [r7, #24]
 8004e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6979      	ldr	r1, [r7, #20]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	613b      	str	r3, [r7, #16]
   return(result);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e5      	bne.n	8004df6 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d013      	beq.n	8004e5a <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e36:	4a26      	ldr	r2, [pc, #152]	@ (8004ed0 <HAL_UART_AbortReceive_IT+0x190>)
 8004e38:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fced 	bl	800281e <HAL_DMA_Abort_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03c      	beq.n	8004ec4 <HAL_UART_AbortReceive_IT+0x184>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
 8004e58:	e034      	b.n	8004ec4 <HAL_UART_AbortReceive_IT+0x184>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	220f      	movs	r2, #15
 8004e6e:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	8b1b      	ldrh	r3, [r3, #24]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0208 	orr.w	r2, r2, #8
 8004e80:	b292      	uxth	r2, r2
 8004e82:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fb38 	bl	8005508 <HAL_UART_AbortReceiveCpltCallback>
 8004e98:	e014      	b.n	8004ec4 <HAL_UART_AbortReceive_IT+0x184>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	220f      	movs	r2, #15
 8004eae:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fb22 	bl	8005508 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3768      	adds	r7, #104	@ 0x68
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	08006095 	.word	0x08006095

08004ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004efa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004efe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f02:	4013      	ands	r3, r2
 8004f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d115      	bne.n	8004f3c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00f      	beq.n	8004f3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 82ca 	beq.w	80054c6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
      }
      return;
 8004f3a:	e2c4      	b.n	80054c6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8117 	beq.w	8005174 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f56:	4b85      	ldr	r3, [pc, #532]	@ (800516c <HAL_UART_IRQHandler+0x298>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 810a 	beq.w	8005174 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d011      	beq.n	8004f90 <HAL_UART_IRQHandler+0xbc>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d011      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xec>
 8004f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2202      	movs	r2, #2
 8004fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb6:	f043 0204 	orr.w	r2, r3, #4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x11c>
 8004fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800500c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2208      	movs	r2, #8
 800501a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005022:	f043 0208 	orr.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005034:	2b00      	cmp	r3, #0
 8005036:	d012      	beq.n	800505e <HAL_UART_IRQHandler+0x18a>
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800503c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800504c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005054:	f043 0220 	orr.w	r2, r3, #32
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8230 	beq.w	80054ca <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00d      	beq.n	8005092 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005098:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a6:	2b40      	cmp	r3, #64	@ 0x40
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d04f      	beq.n	8005156 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 ff72 	bl	8005fa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d141      	bne.n	800514e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800510e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1d9      	bne.n	80050ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511a:	2b00      	cmp	r3, #0
 800511c:	d013      	beq.n	8005146 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005122:	4a13      	ldr	r2, [pc, #76]	@ (8005170 <HAL_UART_IRQHandler+0x29c>)
 8005124:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd fb77 	bl	800281e <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d017      	beq.n	8005166 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e00f      	b.n	8005166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9d4 	bl	80054f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e00b      	b.n	8005166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9d0 	bl	80054f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	e007      	b.n	8005166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9cc 	bl	80054f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005164:	e1b1      	b.n	80054ca <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005166:	bf00      	nop
    return;
 8005168:	e1af      	b.n	80054ca <HAL_UART_IRQHandler+0x5f6>
 800516a:	bf00      	nop
 800516c:	04000120 	.word	0x04000120
 8005170:	08006069 	.word	0x08006069

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005178:	2b01      	cmp	r3, #1
 800517a:	f040 816a 	bne.w	8005452 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8163 	beq.w	8005452 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 815c 	beq.w	8005452 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2210      	movs	r2, #16
 80051a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b40      	cmp	r3, #64	@ 0x40
 80051ae:	f040 80d4 	bne.w	800535a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80ad 	beq.w	8005322 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f080 80a5 	bcs.w	8005322 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 8086 	bne.w	8005300 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005208:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800520c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800521e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005222:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800522a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1da      	bne.n	80051f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3308      	adds	r3, #8
 8005244:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800524e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3308      	adds	r3, #8
 800525e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005262:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005266:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800526a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e1      	bne.n	800523e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800528a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800528c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800529e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e3      	bne.n	800527a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d0:	f023 0310 	bic.w	r3, r3, #16
 80052d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e4      	bne.n	80052c0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fd fa51 	bl	80027a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005312:	b29b      	uxth	r3, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	b29b      	uxth	r3, r3
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8fe 	bl	800551c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005320:	e0d5      	b.n	80054ce <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800532c:	429a      	cmp	r2, r3
 800532e:	f040 80ce 	bne.w	80054ce <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b20      	cmp	r3, #32
 8005340:	f040 80c5 	bne.w	80054ce <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8e2 	bl	800551c <HAL_UARTEx_RxEventCallback>
      return;
 8005358:	e0b9      	b.n	80054ce <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005366:	b29b      	uxth	r3, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 80ab 	beq.w	80054d2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800537c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a6 	beq.w	80054d2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800539a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e4      	bne.n	8005386 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	623b      	str	r3, [r7, #32]
   return(result);
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	f023 0301 	bic.w	r3, r3, #1
 80053d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e3      	bne.n	80053bc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	60fb      	str	r3, [r7, #12]
   return(result);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f023 0310 	bic.w	r3, r3, #16
 800541c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	617b      	str	r3, [r7, #20]
   return(result);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e4      	bne.n	8005408 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f866 	bl	800551c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005450:	e03f      	b.n	80054d2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <HAL_UART_IRQHandler+0x5a8>
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005472:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 f81b 	bl	80064b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800547a:	e02d      	b.n	80054d8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800547c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800548c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01c      	beq.n	80054d6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	4798      	blx	r3
    }
    return;
 80054a4:	e017      	b.n	80054d6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d012      	beq.n	80054d8 <HAL_UART_IRQHandler+0x604>
 80054b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fe0f 	bl	80060e2 <UART_EndTransmit_IT>
    return;
 80054c4:	e008      	b.n	80054d8 <HAL_UART_IRQHandler+0x604>
      return;
 80054c6:	bf00      	nop
 80054c8:	e006      	b.n	80054d8 <HAL_UART_IRQHandler+0x604>
    return;
 80054ca:	bf00      	nop
 80054cc:	e004      	b.n	80054d8 <HAL_UART_IRQHandler+0x604>
      return;
 80054ce:	bf00      	nop
 80054d0:	e002      	b.n	80054d8 <HAL_UART_IRQHandler+0x604>
      return;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <HAL_UART_IRQHandler+0x604>
    return;
 80054d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80054d8:	37e8      	adds	r7, #232	@ 0xe8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop

080054e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005538:	b08a      	sub	sp, #40	@ 0x28
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4313      	orrs	r3, r2
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4ba4      	ldr	r3, [pc, #656]	@ (80057f4 <UART_SetConfig+0x2c0>)
 8005564:	4013      	ands	r3, r2
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800556c:	430b      	orrs	r3, r1
 800556e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a99      	ldr	r2, [pc, #612]	@ (80057f8 <UART_SetConfig+0x2c4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559c:	4313      	orrs	r3, r2
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b0:	430a      	orrs	r2, r1
 80055b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a90      	ldr	r2, [pc, #576]	@ (80057fc <UART_SetConfig+0x2c8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d126      	bne.n	800560c <UART_SetConfig+0xd8>
 80055be:	4b90      	ldr	r3, [pc, #576]	@ (8005800 <UART_SetConfig+0x2cc>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d81b      	bhi.n	8005604 <UART_SetConfig+0xd0>
 80055cc:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <UART_SetConfig+0xa0>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ea:	e116      	b.n	800581a <UART_SetConfig+0x2e6>
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f2:	e112      	b.n	800581a <UART_SetConfig+0x2e6>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fa:	e10e      	b.n	800581a <UART_SetConfig+0x2e6>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005602:	e10a      	b.n	800581a <UART_SetConfig+0x2e6>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560a:	e106      	b.n	800581a <UART_SetConfig+0x2e6>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a7c      	ldr	r2, [pc, #496]	@ (8005804 <UART_SetConfig+0x2d0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d138      	bne.n	8005688 <UART_SetConfig+0x154>
 8005616:	4b7a      	ldr	r3, [pc, #488]	@ (8005800 <UART_SetConfig+0x2cc>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d82d      	bhi.n	8005680 <UART_SetConfig+0x14c>
 8005624:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <UART_SetConfig+0xf8>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005661 	.word	0x08005661
 8005630:	08005681 	.word	0x08005681
 8005634:	08005681 	.word	0x08005681
 8005638:	08005681 	.word	0x08005681
 800563c:	08005671 	.word	0x08005671
 8005640:	08005681 	.word	0x08005681
 8005644:	08005681 	.word	0x08005681
 8005648:	08005681 	.word	0x08005681
 800564c:	08005669 	.word	0x08005669
 8005650:	08005681 	.word	0x08005681
 8005654:	08005681 	.word	0x08005681
 8005658:	08005681 	.word	0x08005681
 800565c:	08005679 	.word	0x08005679
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005666:	e0d8      	b.n	800581a <UART_SetConfig+0x2e6>
 8005668:	2302      	movs	r3, #2
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800566e:	e0d4      	b.n	800581a <UART_SetConfig+0x2e6>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005676:	e0d0      	b.n	800581a <UART_SetConfig+0x2e6>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567e:	e0cc      	b.n	800581a <UART_SetConfig+0x2e6>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005686:	e0c8      	b.n	800581a <UART_SetConfig+0x2e6>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5e      	ldr	r2, [pc, #376]	@ (8005808 <UART_SetConfig+0x2d4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d125      	bne.n	80056de <UART_SetConfig+0x1aa>
 8005692:	4b5b      	ldr	r3, [pc, #364]	@ (8005800 <UART_SetConfig+0x2cc>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800569c:	2b30      	cmp	r3, #48	@ 0x30
 800569e:	d016      	beq.n	80056ce <UART_SetConfig+0x19a>
 80056a0:	2b30      	cmp	r3, #48	@ 0x30
 80056a2:	d818      	bhi.n	80056d6 <UART_SetConfig+0x1a2>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d00a      	beq.n	80056be <UART_SetConfig+0x18a>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d814      	bhi.n	80056d6 <UART_SetConfig+0x1a2>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <UART_SetConfig+0x182>
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d008      	beq.n	80056c6 <UART_SetConfig+0x192>
 80056b4:	e00f      	b.n	80056d6 <UART_SetConfig+0x1a2>
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056bc:	e0ad      	b.n	800581a <UART_SetConfig+0x2e6>
 80056be:	2302      	movs	r3, #2
 80056c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c4:	e0a9      	b.n	800581a <UART_SetConfig+0x2e6>
 80056c6:	2304      	movs	r3, #4
 80056c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056cc:	e0a5      	b.n	800581a <UART_SetConfig+0x2e6>
 80056ce:	2308      	movs	r3, #8
 80056d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d4:	e0a1      	b.n	800581a <UART_SetConfig+0x2e6>
 80056d6:	2310      	movs	r3, #16
 80056d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056dc:	e09d      	b.n	800581a <UART_SetConfig+0x2e6>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a4a      	ldr	r2, [pc, #296]	@ (800580c <UART_SetConfig+0x2d8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d125      	bne.n	8005734 <UART_SetConfig+0x200>
 80056e8:	4b45      	ldr	r3, [pc, #276]	@ (8005800 <UART_SetConfig+0x2cc>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056f4:	d016      	beq.n	8005724 <UART_SetConfig+0x1f0>
 80056f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056f8:	d818      	bhi.n	800572c <UART_SetConfig+0x1f8>
 80056fa:	2b80      	cmp	r3, #128	@ 0x80
 80056fc:	d00a      	beq.n	8005714 <UART_SetConfig+0x1e0>
 80056fe:	2b80      	cmp	r3, #128	@ 0x80
 8005700:	d814      	bhi.n	800572c <UART_SetConfig+0x1f8>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <UART_SetConfig+0x1d8>
 8005706:	2b40      	cmp	r3, #64	@ 0x40
 8005708:	d008      	beq.n	800571c <UART_SetConfig+0x1e8>
 800570a:	e00f      	b.n	800572c <UART_SetConfig+0x1f8>
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005712:	e082      	b.n	800581a <UART_SetConfig+0x2e6>
 8005714:	2302      	movs	r3, #2
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571a:	e07e      	b.n	800581a <UART_SetConfig+0x2e6>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005722:	e07a      	b.n	800581a <UART_SetConfig+0x2e6>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800572a:	e076      	b.n	800581a <UART_SetConfig+0x2e6>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005732:	e072      	b.n	800581a <UART_SetConfig+0x2e6>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a35      	ldr	r2, [pc, #212]	@ (8005810 <UART_SetConfig+0x2dc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d12a      	bne.n	8005794 <UART_SetConfig+0x260>
 800573e:	4b30      	ldr	r3, [pc, #192]	@ (8005800 <UART_SetConfig+0x2cc>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800574c:	d01a      	beq.n	8005784 <UART_SetConfig+0x250>
 800574e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005752:	d81b      	bhi.n	800578c <UART_SetConfig+0x258>
 8005754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005758:	d00c      	beq.n	8005774 <UART_SetConfig+0x240>
 800575a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800575e:	d815      	bhi.n	800578c <UART_SetConfig+0x258>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <UART_SetConfig+0x238>
 8005764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005768:	d008      	beq.n	800577c <UART_SetConfig+0x248>
 800576a:	e00f      	b.n	800578c <UART_SetConfig+0x258>
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005772:	e052      	b.n	800581a <UART_SetConfig+0x2e6>
 8005774:	2302      	movs	r3, #2
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800577a:	e04e      	b.n	800581a <UART_SetConfig+0x2e6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005782:	e04a      	b.n	800581a <UART_SetConfig+0x2e6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800578a:	e046      	b.n	800581a <UART_SetConfig+0x2e6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005792:	e042      	b.n	800581a <UART_SetConfig+0x2e6>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <UART_SetConfig+0x2c4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d13a      	bne.n	8005814 <UART_SetConfig+0x2e0>
 800579e:	4b18      	ldr	r3, [pc, #96]	@ (8005800 <UART_SetConfig+0x2cc>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80057a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057ac:	d01a      	beq.n	80057e4 <UART_SetConfig+0x2b0>
 80057ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057b2:	d81b      	bhi.n	80057ec <UART_SetConfig+0x2b8>
 80057b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b8:	d00c      	beq.n	80057d4 <UART_SetConfig+0x2a0>
 80057ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057be:	d815      	bhi.n	80057ec <UART_SetConfig+0x2b8>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <UART_SetConfig+0x298>
 80057c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c8:	d008      	beq.n	80057dc <UART_SetConfig+0x2a8>
 80057ca:	e00f      	b.n	80057ec <UART_SetConfig+0x2b8>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d2:	e022      	b.n	800581a <UART_SetConfig+0x2e6>
 80057d4:	2302      	movs	r3, #2
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057da:	e01e      	b.n	800581a <UART_SetConfig+0x2e6>
 80057dc:	2304      	movs	r3, #4
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e2:	e01a      	b.n	800581a <UART_SetConfig+0x2e6>
 80057e4:	2308      	movs	r3, #8
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ea:	e016      	b.n	800581a <UART_SetConfig+0x2e6>
 80057ec:	2310      	movs	r3, #16
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f2:	e012      	b.n	800581a <UART_SetConfig+0x2e6>
 80057f4:	efff69f3 	.word	0xefff69f3
 80057f8:	40008000 	.word	0x40008000
 80057fc:	40013800 	.word	0x40013800
 8005800:	40021000 	.word	0x40021000
 8005804:	40004400 	.word	0x40004400
 8005808:	40004800 	.word	0x40004800
 800580c:	40004c00 	.word	0x40004c00
 8005810:	40005000 	.word	0x40005000
 8005814:	2310      	movs	r3, #16
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a9f      	ldr	r2, [pc, #636]	@ (8005a9c <UART_SetConfig+0x568>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d17a      	bne.n	800591a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005824:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005828:	2b08      	cmp	r3, #8
 800582a:	d824      	bhi.n	8005876 <UART_SetConfig+0x342>
 800582c:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <UART_SetConfig+0x300>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005859 	.word	0x08005859
 8005838:	08005877 	.word	0x08005877
 800583c:	08005861 	.word	0x08005861
 8005840:	08005877 	.word	0x08005877
 8005844:	08005867 	.word	0x08005867
 8005848:	08005877 	.word	0x08005877
 800584c:	08005877 	.word	0x08005877
 8005850:	08005877 	.word	0x08005877
 8005854:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe f888 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 800585c:	61f8      	str	r0, [r7, #28]
        break;
 800585e:	e010      	b.n	8005882 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b8f      	ldr	r3, [pc, #572]	@ (8005aa0 <UART_SetConfig+0x56c>)
 8005862:	61fb      	str	r3, [r7, #28]
        break;
 8005864:	e00d      	b.n	8005882 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fd ffe9 	bl	800383c <HAL_RCC_GetSysClockFreq>
 800586a:	61f8      	str	r0, [r7, #28]
        break;
 800586c:	e009      	b.n	8005882 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005872:	61fb      	str	r3, [r7, #28]
        break;
 8005874:	e005      	b.n	8005882 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005880:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80fb 	beq.w	8005a80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4413      	add	r3, r2
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	429a      	cmp	r2, r3
 8005898:	d305      	bcc.n	80058a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d903      	bls.n	80058ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058ac:	e0e8      	b.n	8005a80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2200      	movs	r2, #0
 80058b2:	461c      	mov	r4, r3
 80058b4:	4615      	mov	r5, r2
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	022b      	lsls	r3, r5, #8
 80058c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058c4:	0222      	lsls	r2, r4, #8
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	6849      	ldr	r1, [r1, #4]
 80058ca:	0849      	lsrs	r1, r1, #1
 80058cc:	2000      	movs	r0, #0
 80058ce:	4688      	mov	r8, r1
 80058d0:	4681      	mov	r9, r0
 80058d2:	eb12 0a08 	adds.w	sl, r2, r8
 80058d6:	eb43 0b09 	adc.w	fp, r3, r9
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e8:	4650      	mov	r0, sl
 80058ea:	4659      	mov	r1, fp
 80058ec:	f7fb f8de 	bl	8000aac <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058fe:	d308      	bcc.n	8005912 <UART_SetConfig+0x3de>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005906:	d204      	bcs.n	8005912 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	e0b6      	b.n	8005a80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005918:	e0b2      	b.n	8005a80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005922:	d15e      	bne.n	80059e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005924:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005928:	2b08      	cmp	r3, #8
 800592a:	d828      	bhi.n	800597e <UART_SetConfig+0x44a>
 800592c:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0x400>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005959 	.word	0x08005959
 8005938:	08005961 	.word	0x08005961
 800593c:	08005969 	.word	0x08005969
 8005940:	0800597f 	.word	0x0800597f
 8005944:	0800596f 	.word	0x0800596f
 8005948:	0800597f 	.word	0x0800597f
 800594c:	0800597f 	.word	0x0800597f
 8005950:	0800597f 	.word	0x0800597f
 8005954:	08005977 	.word	0x08005977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fe f808 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 800595c:	61f8      	str	r0, [r7, #28]
        break;
 800595e:	e014      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7fe f81a 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8005964:	61f8      	str	r0, [r7, #28]
        break;
 8005966:	e010      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005968:	4b4d      	ldr	r3, [pc, #308]	@ (8005aa0 <UART_SetConfig+0x56c>)
 800596a:	61fb      	str	r3, [r7, #28]
        break;
 800596c:	e00d      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596e:	f7fd ff65 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8005972:	61f8      	str	r0, [r7, #28]
        break;
 8005974:	e009      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800597a:	61fb      	str	r3, [r7, #28]
        break;
 800597c:	e005      	b.n	800598a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d077      	beq.n	8005a80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	005a      	lsls	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	441a      	add	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b0f      	cmp	r3, #15
 80059aa:	d916      	bls.n	80059da <UART_SetConfig+0x4a6>
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b2:	d212      	bcs.n	80059da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f023 030f 	bic.w	r3, r3, #15
 80059bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	8afb      	ldrh	r3, [r7, #22]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	8afa      	ldrh	r2, [r7, #22]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	e052      	b.n	8005a80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059e0:	e04e      	b.n	8005a80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d827      	bhi.n	8005a3a <UART_SetConfig+0x506>
 80059ea:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <UART_SetConfig+0x4bc>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	08005a3b 	.word	0x08005a3b
 8005a00:	08005a2b 	.word	0x08005a2b
 8005a04:	08005a3b 	.word	0x08005a3b
 8005a08:	08005a3b 	.word	0x08005a3b
 8005a0c:	08005a3b 	.word	0x08005a3b
 8005a10:	08005a33 	.word	0x08005a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fd ffaa 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8005a18:	61f8      	str	r0, [r7, #28]
        break;
 8005a1a:	e014      	b.n	8005a46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a1c:	f7fd ffbc 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8005a20:	61f8      	str	r0, [r7, #28]
        break;
 8005a22:	e010      	b.n	8005a46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a24:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa0 <UART_SetConfig+0x56c>)
 8005a26:	61fb      	str	r3, [r7, #28]
        break;
 8005a28:	e00d      	b.n	8005a46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a2a:	f7fd ff07 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8005a2e:	61f8      	str	r0, [r7, #28]
        break;
 8005a30:	e009      	b.n	8005a46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a36:	61fb      	str	r3, [r7, #28]
        break;
 8005a38:	e005      	b.n	8005a46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a44:	bf00      	nop
    }

    if (pclk != 0U)
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d019      	beq.n	8005a80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	085a      	lsrs	r2, r3, #1
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b0f      	cmp	r3, #15
 8005a64:	d909      	bls.n	8005a7a <UART_SetConfig+0x546>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a6c:	d205      	bcs.n	8005a7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	e002      	b.n	8005a80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3728      	adds	r7, #40	@ 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40008000 	.word	0x40008000
 8005aa0:	00f42400 	.word	0x00f42400

08005aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01a      	beq.n	8005bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ba2:	d10a      	bne.n	8005bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	605a      	str	r2, [r3, #4]
  }
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b098      	sub	sp, #96	@ 0x60
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bf8:	f7fc fc72 	bl	80024e0 <HAL_GetTick>
 8005bfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d12e      	bne.n	8005c6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f88c 	bl	8005d38 <UART_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d021      	beq.n	8005c6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e062      	b.n	8005d30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d149      	bne.n	8005d0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c80:	2200      	movs	r2, #0
 8005c82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f856 	bl	8005d38 <UART_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d03c      	beq.n	8005d0c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e6      	bne.n	8005c92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ce4:	61fa      	str	r2, [r7, #28]
 8005ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	69b9      	ldr	r1, [r7, #24]
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e5      	bne.n	8005cc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e011      	b.n	8005d30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3758      	adds	r7, #88	@ 0x58
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d48:	e04f      	b.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d04b      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d52:	f7fc fbc5 	bl	80024e0 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d302      	bcc.n	8005d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e04e      	b.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d037      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b80      	cmp	r3, #128	@ 0x80
 8005d7e:	d034      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b40      	cmp	r3, #64	@ 0x40
 8005d84:	d031      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d110      	bne.n	8005db6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2208      	movs	r2, #8
 8005d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f8ff 	bl	8005fa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2208      	movs	r2, #8
 8005da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e029      	b.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dc4:	d111      	bne.n	8005dea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f8e5 	bl	8005fa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e00f      	b.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4013      	ands	r3, r2
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d0a0      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b097      	sub	sp, #92	@ 0x5c
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e46:	d10e      	bne.n	8005e66 <UART_Start_Receive_IT+0x52>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d105      	bne.n	8005e5c <UART_Start_Receive_IT+0x48>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e5a:	e02d      	b.n	8005eb8 <UART_Start_Receive_IT+0xa4>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	22ff      	movs	r2, #255	@ 0xff
 8005e60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e64:	e028      	b.n	8005eb8 <UART_Start_Receive_IT+0xa4>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10d      	bne.n	8005e8a <UART_Start_Receive_IT+0x76>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <UART_Start_Receive_IT+0x6c>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	22ff      	movs	r2, #255	@ 0xff
 8005e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e7e:	e01b      	b.n	8005eb8 <UART_Start_Receive_IT+0xa4>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	227f      	movs	r2, #127	@ 0x7f
 8005e84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e88:	e016      	b.n	8005eb8 <UART_Start_Receive_IT+0xa4>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e92:	d10d      	bne.n	8005eb0 <UART_Start_Receive_IT+0x9c>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <UART_Start_Receive_IT+0x92>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	227f      	movs	r2, #127	@ 0x7f
 8005ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ea4:	e008      	b.n	8005eb8 <UART_Start_Receive_IT+0xa4>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	223f      	movs	r2, #63	@ 0x3f
 8005eaa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005eae:	e003      	b.n	8005eb8 <UART_Start_Receive_IT+0xa4>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2222      	movs	r2, #34	@ 0x22
 8005ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ee8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005eea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e5      	bne.n	8005ec8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f04:	d107      	bne.n	8005f16 <UART_Start_Receive_IT+0x102>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a21      	ldr	r2, [pc, #132]	@ (8005f98 <UART_Start_Receive_IT+0x184>)
 8005f12:	669a      	str	r2, [r3, #104]	@ 0x68
 8005f14:	e002      	b.n	8005f1c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a20      	ldr	r2, [pc, #128]	@ (8005f9c <UART_Start_Receive_IT+0x188>)
 8005f1a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d019      	beq.n	8005f58 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e6      	bne.n	8005f24 <UART_Start_Receive_IT+0x110>
 8005f56:	e018      	b.n	8005f8a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	613b      	str	r3, [r7, #16]
   return(result);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f043 0320 	orr.w	r3, r3, #32
 8005f6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f76:	623b      	str	r3, [r7, #32]
 8005f78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	69f9      	ldr	r1, [r7, #28]
 8005f7c:	6a3a      	ldr	r2, [r7, #32]
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e6      	bne.n	8005f58 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	375c      	adds	r7, #92	@ 0x5c
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	080062f5 	.word	0x080062f5
 8005f9c:	08006139 	.word	0x08006139

08005fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b095      	sub	sp, #84	@ 0x54
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e6      	bne.n	8005fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e5      	bne.n	8005fda <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006012:	2b01      	cmp	r3, #1
 8006014:	d118      	bne.n	8006048 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60bb      	str	r3, [r7, #8]
   return(result);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	647b      	str	r3, [r7, #68]	@ 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	613b      	str	r3, [r7, #16]
   return(result);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e6      	bne.n	8006016 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800605c:	bf00      	nop
 800605e:	3754      	adds	r7, #84	@ 0x54
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff fa34 	bl	80054f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	220f      	movs	r2, #15
 80060b0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	8b1b      	ldrh	r3, [r3, #24]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	b292      	uxth	r2, r2
 80060c4:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	661a      	str	r2, [r3, #96]	@ 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff fa17 	bl	8005508 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b088      	sub	sp, #32
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	61bb      	str	r3, [r7, #24]
 800610a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6979      	ldr	r1, [r7, #20]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	613b      	str	r3, [r7, #16]
   return(result);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e6      	bne.n	80060ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff f9d9 	bl	80054e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800612e:	bf00      	nop
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b09c      	sub	sp, #112	@ 0x70
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006146:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006150:	2b22      	cmp	r3, #34	@ 0x22
 8006152:	f040 80be 	bne.w	80062d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800615c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006164:	b2d9      	uxtb	r1, r3
 8006166:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800616a:	b2da      	uxtb	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006170:	400a      	ands	r2, r1
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 80a3 	bne.w	80062e6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e6      	bne.n	80061a0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80061f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80061f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e5      	bne.n	80061d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a34      	ldr	r2, [pc, #208]	@ (80062f0 <UART_RxISR_8BIT+0x1b8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d01f      	beq.n	8006264 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d018      	beq.n	8006264 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	623b      	str	r3, [r7, #32]
   return(result);
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006246:	663b      	str	r3, [r7, #96]	@ 0x60
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30
 8006252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800625e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e6      	bne.n	8006232 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006268:	2b01      	cmp	r3, #1
 800626a:	d12e      	bne.n	80062ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0310 	bic.w	r3, r3, #16
 8006286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006290:	61fb      	str	r3, [r7, #28]
 8006292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	617b      	str	r3, [r7, #20]
   return(result);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e6      	bne.n	8006272 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f003 0310 	and.w	r3, r3, #16
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d103      	bne.n	80062ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff f92a 	bl	800551c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062c8:	e00d      	b.n	80062e6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb f8e8 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 80062d0:	e009      	b.n	80062e6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	8b1b      	ldrh	r3, [r3, #24]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0208 	orr.w	r2, r2, #8
 80062e2:	b292      	uxth	r2, r2
 80062e4:	831a      	strh	r2, [r3, #24]
}
 80062e6:	bf00      	nop
 80062e8:	3770      	adds	r7, #112	@ 0x70
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40008000 	.word	0x40008000

080062f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b09c      	sub	sp, #112	@ 0x70
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006302:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800630c:	2b22      	cmp	r3, #34	@ 0x22
 800630e:	f040 80be 	bne.w	800648e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006318:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006320:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006322:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006326:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800632a:	4013      	ands	r3, r2
 800632c:	b29a      	uxth	r2, r3
 800632e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006336:	1c9a      	adds	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 80a3 	bne.w	80064a2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800636a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800636c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006370:	667b      	str	r3, [r7, #100]	@ 0x64
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800637a:	657b      	str	r3, [r7, #84]	@ 0x54
 800637c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006380:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e6      	bne.n	800635c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a34      	ldr	r2, [pc, #208]	@ (80064ac <UART_RxISR_16BIT+0x1b8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d01f      	beq.n	8006420 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006402:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800640c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800640e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006424:	2b01      	cmp	r3, #1
 8006426:	d12e      	bne.n	8006486 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60bb      	str	r3, [r7, #8]
   return(result);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d103      	bne.n	8006476 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2210      	movs	r2, #16
 8006474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff f84c 	bl	800551c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006484:	e00d      	b.n	80064a2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fb f80a 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 800648c:	e009      	b.n	80064a2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	8b1b      	ldrh	r3, [r3, #24]
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0208 	orr.w	r2, r2, #8
 800649e:	b292      	uxth	r2, r2
 80064a0:	831a      	strh	r2, [r3, #24]
}
 80064a2:	bf00      	nop
 80064a4:	3770      	adds	r7, #112	@ 0x70
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40008000 	.word	0x40008000

080064b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <srand>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4b10      	ldr	r3, [pc, #64]	@ (8006508 <srand+0x44>)
 80064c8:	681d      	ldr	r5, [r3, #0]
 80064ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80064cc:	4604      	mov	r4, r0
 80064ce:	b9b3      	cbnz	r3, 80064fe <srand+0x3a>
 80064d0:	2018      	movs	r0, #24
 80064d2:	f000 faa9 	bl	8006a28 <malloc>
 80064d6:	4602      	mov	r2, r0
 80064d8:	6328      	str	r0, [r5, #48]	@ 0x30
 80064da:	b920      	cbnz	r0, 80064e6 <srand+0x22>
 80064dc:	4b0b      	ldr	r3, [pc, #44]	@ (800650c <srand+0x48>)
 80064de:	480c      	ldr	r0, [pc, #48]	@ (8006510 <srand+0x4c>)
 80064e0:	2146      	movs	r1, #70	@ 0x46
 80064e2:	f000 fa39 	bl	8006958 <__assert_func>
 80064e6:	490b      	ldr	r1, [pc, #44]	@ (8006514 <srand+0x50>)
 80064e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <srand+0x54>)
 80064ea:	e9c0 1300 	strd	r1, r3, [r0]
 80064ee:	4b0b      	ldr	r3, [pc, #44]	@ (800651c <srand+0x58>)
 80064f0:	6083      	str	r3, [r0, #8]
 80064f2:	230b      	movs	r3, #11
 80064f4:	8183      	strh	r3, [r0, #12]
 80064f6:	2100      	movs	r1, #0
 80064f8:	2001      	movs	r0, #1
 80064fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80064fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006500:	2200      	movs	r2, #0
 8006502:	611c      	str	r4, [r3, #16]
 8006504:	615a      	str	r2, [r3, #20]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	2000002c 	.word	0x2000002c
 800650c:	0800945c 	.word	0x0800945c
 8006510:	08009473 	.word	0x08009473
 8006514:	abcd330e 	.word	0xabcd330e
 8006518:	e66d1234 	.word	0xe66d1234
 800651c:	0005deec 	.word	0x0005deec

08006520 <rand>:
 8006520:	4b16      	ldr	r3, [pc, #88]	@ (800657c <rand+0x5c>)
 8006522:	b510      	push	{r4, lr}
 8006524:	681c      	ldr	r4, [r3, #0]
 8006526:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006528:	b9b3      	cbnz	r3, 8006558 <rand+0x38>
 800652a:	2018      	movs	r0, #24
 800652c:	f000 fa7c 	bl	8006a28 <malloc>
 8006530:	4602      	mov	r2, r0
 8006532:	6320      	str	r0, [r4, #48]	@ 0x30
 8006534:	b920      	cbnz	r0, 8006540 <rand+0x20>
 8006536:	4b12      	ldr	r3, [pc, #72]	@ (8006580 <rand+0x60>)
 8006538:	4812      	ldr	r0, [pc, #72]	@ (8006584 <rand+0x64>)
 800653a:	2152      	movs	r1, #82	@ 0x52
 800653c:	f000 fa0c 	bl	8006958 <__assert_func>
 8006540:	4911      	ldr	r1, [pc, #68]	@ (8006588 <rand+0x68>)
 8006542:	4b12      	ldr	r3, [pc, #72]	@ (800658c <rand+0x6c>)
 8006544:	e9c0 1300 	strd	r1, r3, [r0]
 8006548:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <rand+0x70>)
 800654a:	6083      	str	r3, [r0, #8]
 800654c:	230b      	movs	r3, #11
 800654e:	8183      	strh	r3, [r0, #12]
 8006550:	2100      	movs	r1, #0
 8006552:	2001      	movs	r0, #1
 8006554:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006558:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800655a:	480e      	ldr	r0, [pc, #56]	@ (8006594 <rand+0x74>)
 800655c:	690b      	ldr	r3, [r1, #16]
 800655e:	694c      	ldr	r4, [r1, #20]
 8006560:	4a0d      	ldr	r2, [pc, #52]	@ (8006598 <rand+0x78>)
 8006562:	4358      	muls	r0, r3
 8006564:	fb02 0004 	mla	r0, r2, r4, r0
 8006568:	fba3 3202 	umull	r3, r2, r3, r2
 800656c:	3301      	adds	r3, #1
 800656e:	eb40 0002 	adc.w	r0, r0, r2
 8006572:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006576:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800657a:	bd10      	pop	{r4, pc}
 800657c:	2000002c 	.word	0x2000002c
 8006580:	0800945c 	.word	0x0800945c
 8006584:	08009473 	.word	0x08009473
 8006588:	abcd330e 	.word	0xabcd330e
 800658c:	e66d1234 	.word	0xe66d1234
 8006590:	0005deec 	.word	0x0005deec
 8006594:	5851f42d 	.word	0x5851f42d
 8006598:	4c957f2d 	.word	0x4c957f2d

0800659c <std>:
 800659c:	2300      	movs	r3, #0
 800659e:	b510      	push	{r4, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	e9c0 3300 	strd	r3, r3, [r0]
 80065a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065aa:	6083      	str	r3, [r0, #8]
 80065ac:	8181      	strh	r1, [r0, #12]
 80065ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80065b0:	81c2      	strh	r2, [r0, #14]
 80065b2:	6183      	str	r3, [r0, #24]
 80065b4:	4619      	mov	r1, r3
 80065b6:	2208      	movs	r2, #8
 80065b8:	305c      	adds	r0, #92	@ 0x5c
 80065ba:	f000 f942 	bl	8006842 <memset>
 80065be:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <std+0x58>)
 80065c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80065c2:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <std+0x5c>)
 80065c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065c6:	4b0d      	ldr	r3, [pc, #52]	@ (80065fc <std+0x60>)
 80065c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <std+0x64>)
 80065cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80065ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <std+0x68>)
 80065d0:	6224      	str	r4, [r4, #32]
 80065d2:	429c      	cmp	r4, r3
 80065d4:	d006      	beq.n	80065e4 <std+0x48>
 80065d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065da:	4294      	cmp	r4, r2
 80065dc:	d002      	beq.n	80065e4 <std+0x48>
 80065de:	33d0      	adds	r3, #208	@ 0xd0
 80065e0:	429c      	cmp	r4, r3
 80065e2:	d105      	bne.n	80065f0 <std+0x54>
 80065e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ec:	f000 b9a2 	b.w	8006934 <__retarget_lock_init_recursive>
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	bf00      	nop
 80065f4:	08006789 	.word	0x08006789
 80065f8:	080067ab 	.word	0x080067ab
 80065fc:	080067e3 	.word	0x080067e3
 8006600:	08006807 	.word	0x08006807
 8006604:	200006fc 	.word	0x200006fc

08006608 <stdio_exit_handler>:
 8006608:	4a02      	ldr	r2, [pc, #8]	@ (8006614 <stdio_exit_handler+0xc>)
 800660a:	4903      	ldr	r1, [pc, #12]	@ (8006618 <stdio_exit_handler+0x10>)
 800660c:	4803      	ldr	r0, [pc, #12]	@ (800661c <stdio_exit_handler+0x14>)
 800660e:	f000 b869 	b.w	80066e4 <_fwalk_sglue>
 8006612:	bf00      	nop
 8006614:	20000020 	.word	0x20000020
 8006618:	08007269 	.word	0x08007269
 800661c:	20000030 	.word	0x20000030

08006620 <cleanup_stdio>:
 8006620:	6841      	ldr	r1, [r0, #4]
 8006622:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <cleanup_stdio+0x34>)
 8006624:	4299      	cmp	r1, r3
 8006626:	b510      	push	{r4, lr}
 8006628:	4604      	mov	r4, r0
 800662a:	d001      	beq.n	8006630 <cleanup_stdio+0x10>
 800662c:	f000 fe1c 	bl	8007268 <_fflush_r>
 8006630:	68a1      	ldr	r1, [r4, #8]
 8006632:	4b09      	ldr	r3, [pc, #36]	@ (8006658 <cleanup_stdio+0x38>)
 8006634:	4299      	cmp	r1, r3
 8006636:	d002      	beq.n	800663e <cleanup_stdio+0x1e>
 8006638:	4620      	mov	r0, r4
 800663a:	f000 fe15 	bl	8007268 <_fflush_r>
 800663e:	68e1      	ldr	r1, [r4, #12]
 8006640:	4b06      	ldr	r3, [pc, #24]	@ (800665c <cleanup_stdio+0x3c>)
 8006642:	4299      	cmp	r1, r3
 8006644:	d004      	beq.n	8006650 <cleanup_stdio+0x30>
 8006646:	4620      	mov	r0, r4
 8006648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800664c:	f000 be0c 	b.w	8007268 <_fflush_r>
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
 8006654:	200006fc 	.word	0x200006fc
 8006658:	20000764 	.word	0x20000764
 800665c:	200007cc 	.word	0x200007cc

08006660 <global_stdio_init.part.0>:
 8006660:	b510      	push	{r4, lr}
 8006662:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <global_stdio_init.part.0+0x30>)
 8006664:	4c0b      	ldr	r4, [pc, #44]	@ (8006694 <global_stdio_init.part.0+0x34>)
 8006666:	4a0c      	ldr	r2, [pc, #48]	@ (8006698 <global_stdio_init.part.0+0x38>)
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	4620      	mov	r0, r4
 800666c:	2200      	movs	r2, #0
 800666e:	2104      	movs	r1, #4
 8006670:	f7ff ff94 	bl	800659c <std>
 8006674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006678:	2201      	movs	r2, #1
 800667a:	2109      	movs	r1, #9
 800667c:	f7ff ff8e 	bl	800659c <std>
 8006680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006684:	2202      	movs	r2, #2
 8006686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668a:	2112      	movs	r1, #18
 800668c:	f7ff bf86 	b.w	800659c <std>
 8006690:	20000834 	.word	0x20000834
 8006694:	200006fc 	.word	0x200006fc
 8006698:	08006609 	.word	0x08006609

0800669c <__sfp_lock_acquire>:
 800669c:	4801      	ldr	r0, [pc, #4]	@ (80066a4 <__sfp_lock_acquire+0x8>)
 800669e:	f000 b94a 	b.w	8006936 <__retarget_lock_acquire_recursive>
 80066a2:	bf00      	nop
 80066a4:	2000083d 	.word	0x2000083d

080066a8 <__sfp_lock_release>:
 80066a8:	4801      	ldr	r0, [pc, #4]	@ (80066b0 <__sfp_lock_release+0x8>)
 80066aa:	f000 b945 	b.w	8006938 <__retarget_lock_release_recursive>
 80066ae:	bf00      	nop
 80066b0:	2000083d 	.word	0x2000083d

080066b4 <__sinit>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4604      	mov	r4, r0
 80066b8:	f7ff fff0 	bl	800669c <__sfp_lock_acquire>
 80066bc:	6a23      	ldr	r3, [r4, #32]
 80066be:	b11b      	cbz	r3, 80066c8 <__sinit+0x14>
 80066c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c4:	f7ff bff0 	b.w	80066a8 <__sfp_lock_release>
 80066c8:	4b04      	ldr	r3, [pc, #16]	@ (80066dc <__sinit+0x28>)
 80066ca:	6223      	str	r3, [r4, #32]
 80066cc:	4b04      	ldr	r3, [pc, #16]	@ (80066e0 <__sinit+0x2c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1f5      	bne.n	80066c0 <__sinit+0xc>
 80066d4:	f7ff ffc4 	bl	8006660 <global_stdio_init.part.0>
 80066d8:	e7f2      	b.n	80066c0 <__sinit+0xc>
 80066da:	bf00      	nop
 80066dc:	08006621 	.word	0x08006621
 80066e0:	20000834 	.word	0x20000834

080066e4 <_fwalk_sglue>:
 80066e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e8:	4607      	mov	r7, r0
 80066ea:	4688      	mov	r8, r1
 80066ec:	4614      	mov	r4, r2
 80066ee:	2600      	movs	r6, #0
 80066f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066f4:	f1b9 0901 	subs.w	r9, r9, #1
 80066f8:	d505      	bpl.n	8006706 <_fwalk_sglue+0x22>
 80066fa:	6824      	ldr	r4, [r4, #0]
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	d1f7      	bne.n	80066f0 <_fwalk_sglue+0xc>
 8006700:	4630      	mov	r0, r6
 8006702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006706:	89ab      	ldrh	r3, [r5, #12]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d907      	bls.n	800671c <_fwalk_sglue+0x38>
 800670c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006710:	3301      	adds	r3, #1
 8006712:	d003      	beq.n	800671c <_fwalk_sglue+0x38>
 8006714:	4629      	mov	r1, r5
 8006716:	4638      	mov	r0, r7
 8006718:	47c0      	blx	r8
 800671a:	4306      	orrs	r6, r0
 800671c:	3568      	adds	r5, #104	@ 0x68
 800671e:	e7e9      	b.n	80066f4 <_fwalk_sglue+0x10>

08006720 <sniprintf>:
 8006720:	b40c      	push	{r2, r3}
 8006722:	b530      	push	{r4, r5, lr}
 8006724:	4b17      	ldr	r3, [pc, #92]	@ (8006784 <sniprintf+0x64>)
 8006726:	1e0c      	subs	r4, r1, #0
 8006728:	681d      	ldr	r5, [r3, #0]
 800672a:	b09d      	sub	sp, #116	@ 0x74
 800672c:	da08      	bge.n	8006740 <sniprintf+0x20>
 800672e:	238b      	movs	r3, #139	@ 0x8b
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	f04f 30ff 	mov.w	r0, #4294967295
 8006736:	b01d      	add	sp, #116	@ 0x74
 8006738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800673c:	b002      	add	sp, #8
 800673e:	4770      	bx	lr
 8006740:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006744:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006748:	bf14      	ite	ne
 800674a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800674e:	4623      	moveq	r3, r4
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	9307      	str	r3, [sp, #28]
 8006754:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006758:	9002      	str	r0, [sp, #8]
 800675a:	9006      	str	r0, [sp, #24]
 800675c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006760:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006762:	ab21      	add	r3, sp, #132	@ 0x84
 8006764:	a902      	add	r1, sp, #8
 8006766:	4628      	mov	r0, r5
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	f000 fa6f 	bl	8006c4c <_svfiprintf_r>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	bfbc      	itt	lt
 8006772:	238b      	movlt	r3, #139	@ 0x8b
 8006774:	602b      	strlt	r3, [r5, #0]
 8006776:	2c00      	cmp	r4, #0
 8006778:	d0dd      	beq.n	8006736 <sniprintf+0x16>
 800677a:	9b02      	ldr	r3, [sp, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	e7d9      	b.n	8006736 <sniprintf+0x16>
 8006782:	bf00      	nop
 8006784:	2000002c 	.word	0x2000002c

08006788 <__sread>:
 8006788:	b510      	push	{r4, lr}
 800678a:	460c      	mov	r4, r1
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	f000 f882 	bl	8006898 <_read_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	bfab      	itete	ge
 8006798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800679a:	89a3      	ldrhlt	r3, [r4, #12]
 800679c:	181b      	addge	r3, r3, r0
 800679e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067a2:	bfac      	ite	ge
 80067a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067a6:	81a3      	strhlt	r3, [r4, #12]
 80067a8:	bd10      	pop	{r4, pc}

080067aa <__swrite>:
 80067aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	461f      	mov	r7, r3
 80067b0:	898b      	ldrh	r3, [r1, #12]
 80067b2:	05db      	lsls	r3, r3, #23
 80067b4:	4605      	mov	r5, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4616      	mov	r6, r2
 80067ba:	d505      	bpl.n	80067c8 <__swrite+0x1e>
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	2302      	movs	r3, #2
 80067c2:	2200      	movs	r2, #0
 80067c4:	f000 f856 	bl	8006874 <_lseek_r>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	4632      	mov	r2, r6
 80067d6:	463b      	mov	r3, r7
 80067d8:	4628      	mov	r0, r5
 80067da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	f000 b86d 	b.w	80068bc <_write_r>

080067e2 <__sseek>:
 80067e2:	b510      	push	{r4, lr}
 80067e4:	460c      	mov	r4, r1
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	f000 f843 	bl	8006874 <_lseek_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	bf15      	itete	ne
 80067f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067fe:	81a3      	strheq	r3, [r4, #12]
 8006800:	bf18      	it	ne
 8006802:	81a3      	strhne	r3, [r4, #12]
 8006804:	bd10      	pop	{r4, pc}

08006806 <__sclose>:
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	f000 b823 	b.w	8006854 <_close_r>

0800680e <memmove>:
 800680e:	4288      	cmp	r0, r1
 8006810:	b510      	push	{r4, lr}
 8006812:	eb01 0402 	add.w	r4, r1, r2
 8006816:	d902      	bls.n	800681e <memmove+0x10>
 8006818:	4284      	cmp	r4, r0
 800681a:	4623      	mov	r3, r4
 800681c:	d807      	bhi.n	800682e <memmove+0x20>
 800681e:	1e43      	subs	r3, r0, #1
 8006820:	42a1      	cmp	r1, r4
 8006822:	d008      	beq.n	8006836 <memmove+0x28>
 8006824:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006828:	f803 2f01 	strb.w	r2, [r3, #1]!
 800682c:	e7f8      	b.n	8006820 <memmove+0x12>
 800682e:	4402      	add	r2, r0
 8006830:	4601      	mov	r1, r0
 8006832:	428a      	cmp	r2, r1
 8006834:	d100      	bne.n	8006838 <memmove+0x2a>
 8006836:	bd10      	pop	{r4, pc}
 8006838:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800683c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006840:	e7f7      	b.n	8006832 <memmove+0x24>

08006842 <memset>:
 8006842:	4402      	add	r2, r0
 8006844:	4603      	mov	r3, r0
 8006846:	4293      	cmp	r3, r2
 8006848:	d100      	bne.n	800684c <memset+0xa>
 800684a:	4770      	bx	lr
 800684c:	f803 1b01 	strb.w	r1, [r3], #1
 8006850:	e7f9      	b.n	8006846 <memset+0x4>
	...

08006854 <_close_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d06      	ldr	r5, [pc, #24]	@ (8006870 <_close_r+0x1c>)
 8006858:	2300      	movs	r3, #0
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fb fd28 	bl	80022b4 <_close>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_close_r+0x1a>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_close_r+0x1a>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	20000838 	.word	0x20000838

08006874 <_lseek_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d07      	ldr	r5, [pc, #28]	@ (8006894 <_lseek_r+0x20>)
 8006878:	4604      	mov	r4, r0
 800687a:	4608      	mov	r0, r1
 800687c:	4611      	mov	r1, r2
 800687e:	2200      	movs	r2, #0
 8006880:	602a      	str	r2, [r5, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f7fb fd3d 	bl	8002302 <_lseek>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_lseek_r+0x1e>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_lseek_r+0x1e>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20000838 	.word	0x20000838

08006898 <_read_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4d07      	ldr	r5, [pc, #28]	@ (80068b8 <_read_r+0x20>)
 800689c:	4604      	mov	r4, r0
 800689e:	4608      	mov	r0, r1
 80068a0:	4611      	mov	r1, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fb fccb 	bl	8002242 <_read>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_read_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_read_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	20000838 	.word	0x20000838

080068bc <_write_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4d07      	ldr	r5, [pc, #28]	@ (80068dc <_write_r+0x20>)
 80068c0:	4604      	mov	r4, r0
 80068c2:	4608      	mov	r0, r1
 80068c4:	4611      	mov	r1, r2
 80068c6:	2200      	movs	r2, #0
 80068c8:	602a      	str	r2, [r5, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f7fb fcd6 	bl	800227c <_write>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_write_r+0x1e>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_write_r+0x1e>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20000838 	.word	0x20000838

080068e0 <__errno>:
 80068e0:	4b01      	ldr	r3, [pc, #4]	@ (80068e8 <__errno+0x8>)
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	2000002c 	.word	0x2000002c

080068ec <__libc_init_array>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006924 <__libc_init_array+0x38>)
 80068f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006928 <__libc_init_array+0x3c>)
 80068f2:	1b64      	subs	r4, r4, r5
 80068f4:	10a4      	asrs	r4, r4, #2
 80068f6:	2600      	movs	r6, #0
 80068f8:	42a6      	cmp	r6, r4
 80068fa:	d109      	bne.n	8006910 <__libc_init_array+0x24>
 80068fc:	4d0b      	ldr	r5, [pc, #44]	@ (800692c <__libc_init_array+0x40>)
 80068fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006930 <__libc_init_array+0x44>)
 8006900:	f000 ffd6 	bl	80078b0 <_init>
 8006904:	1b64      	subs	r4, r4, r5
 8006906:	10a4      	asrs	r4, r4, #2
 8006908:	2600      	movs	r6, #0
 800690a:	42a6      	cmp	r6, r4
 800690c:	d105      	bne.n	800691a <__libc_init_array+0x2e>
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	f855 3b04 	ldr.w	r3, [r5], #4
 8006914:	4798      	blx	r3
 8006916:	3601      	adds	r6, #1
 8006918:	e7ee      	b.n	80068f8 <__libc_init_array+0xc>
 800691a:	f855 3b04 	ldr.w	r3, [r5], #4
 800691e:	4798      	blx	r3
 8006920:	3601      	adds	r6, #1
 8006922:	e7f2      	b.n	800690a <__libc_init_array+0x1e>
 8006924:	08009544 	.word	0x08009544
 8006928:	08009544 	.word	0x08009544
 800692c:	08009544 	.word	0x08009544
 8006930:	08009548 	.word	0x08009548

08006934 <__retarget_lock_init_recursive>:
 8006934:	4770      	bx	lr

08006936 <__retarget_lock_acquire_recursive>:
 8006936:	4770      	bx	lr

08006938 <__retarget_lock_release_recursive>:
 8006938:	4770      	bx	lr

0800693a <memcpy>:
 800693a:	440a      	add	r2, r1
 800693c:	4291      	cmp	r1, r2
 800693e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006942:	d100      	bne.n	8006946 <memcpy+0xc>
 8006944:	4770      	bx	lr
 8006946:	b510      	push	{r4, lr}
 8006948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800694c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006950:	4291      	cmp	r1, r2
 8006952:	d1f9      	bne.n	8006948 <memcpy+0xe>
 8006954:	bd10      	pop	{r4, pc}
	...

08006958 <__assert_func>:
 8006958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800695a:	4614      	mov	r4, r2
 800695c:	461a      	mov	r2, r3
 800695e:	4b09      	ldr	r3, [pc, #36]	@ (8006984 <__assert_func+0x2c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4605      	mov	r5, r0
 8006964:	68d8      	ldr	r0, [r3, #12]
 8006966:	b954      	cbnz	r4, 800697e <__assert_func+0x26>
 8006968:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <__assert_func+0x30>)
 800696a:	461c      	mov	r4, r3
 800696c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006970:	9100      	str	r1, [sp, #0]
 8006972:	462b      	mov	r3, r5
 8006974:	4905      	ldr	r1, [pc, #20]	@ (800698c <__assert_func+0x34>)
 8006976:	f000 fc9f 	bl	80072b8 <fiprintf>
 800697a:	f000 fcbf 	bl	80072fc <abort>
 800697e:	4b04      	ldr	r3, [pc, #16]	@ (8006990 <__assert_func+0x38>)
 8006980:	e7f4      	b.n	800696c <__assert_func+0x14>
 8006982:	bf00      	nop
 8006984:	2000002c 	.word	0x2000002c
 8006988:	08009506 	.word	0x08009506
 800698c:	080094d8 	.word	0x080094d8
 8006990:	080094cb 	.word	0x080094cb

08006994 <_free_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4605      	mov	r5, r0
 8006998:	2900      	cmp	r1, #0
 800699a:	d041      	beq.n	8006a20 <_free_r+0x8c>
 800699c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a0:	1f0c      	subs	r4, r1, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfb8      	it	lt
 80069a6:	18e4      	addlt	r4, r4, r3
 80069a8:	f000 f8e8 	bl	8006b7c <__malloc_lock>
 80069ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006a24 <_free_r+0x90>)
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	b933      	cbnz	r3, 80069c0 <_free_r+0x2c>
 80069b2:	6063      	str	r3, [r4, #4]
 80069b4:	6014      	str	r4, [r2, #0]
 80069b6:	4628      	mov	r0, r5
 80069b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069bc:	f000 b8e4 	b.w	8006b88 <__malloc_unlock>
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d908      	bls.n	80069d6 <_free_r+0x42>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	1821      	adds	r1, r4, r0
 80069c8:	428b      	cmp	r3, r1
 80069ca:	bf01      	itttt	eq
 80069cc:	6819      	ldreq	r1, [r3, #0]
 80069ce:	685b      	ldreq	r3, [r3, #4]
 80069d0:	1809      	addeq	r1, r1, r0
 80069d2:	6021      	streq	r1, [r4, #0]
 80069d4:	e7ed      	b.n	80069b2 <_free_r+0x1e>
 80069d6:	461a      	mov	r2, r3
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	b10b      	cbz	r3, 80069e0 <_free_r+0x4c>
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d9fa      	bls.n	80069d6 <_free_r+0x42>
 80069e0:	6811      	ldr	r1, [r2, #0]
 80069e2:	1850      	adds	r0, r2, r1
 80069e4:	42a0      	cmp	r0, r4
 80069e6:	d10b      	bne.n	8006a00 <_free_r+0x6c>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	4401      	add	r1, r0
 80069ec:	1850      	adds	r0, r2, r1
 80069ee:	4283      	cmp	r3, r0
 80069f0:	6011      	str	r1, [r2, #0]
 80069f2:	d1e0      	bne.n	80069b6 <_free_r+0x22>
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	6053      	str	r3, [r2, #4]
 80069fa:	4408      	add	r0, r1
 80069fc:	6010      	str	r0, [r2, #0]
 80069fe:	e7da      	b.n	80069b6 <_free_r+0x22>
 8006a00:	d902      	bls.n	8006a08 <_free_r+0x74>
 8006a02:	230c      	movs	r3, #12
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	e7d6      	b.n	80069b6 <_free_r+0x22>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	1821      	adds	r1, r4, r0
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bf04      	itt	eq
 8006a10:	6819      	ldreq	r1, [r3, #0]
 8006a12:	685b      	ldreq	r3, [r3, #4]
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	bf04      	itt	eq
 8006a18:	1809      	addeq	r1, r1, r0
 8006a1a:	6021      	streq	r1, [r4, #0]
 8006a1c:	6054      	str	r4, [r2, #4]
 8006a1e:	e7ca      	b.n	80069b6 <_free_r+0x22>
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	20000844 	.word	0x20000844

08006a28 <malloc>:
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <malloc+0xc>)
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	f000 b825 	b.w	8006a7c <_malloc_r>
 8006a32:	bf00      	nop
 8006a34:	2000002c 	.word	0x2000002c

08006a38 <sbrk_aligned>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a78 <sbrk_aligned+0x40>)
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	6831      	ldr	r1, [r6, #0]
 8006a40:	4605      	mov	r5, r0
 8006a42:	b911      	cbnz	r1, 8006a4a <sbrk_aligned+0x12>
 8006a44:	f000 fc4a 	bl	80072dc <_sbrk_r>
 8006a48:	6030      	str	r0, [r6, #0]
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 fc45 	bl	80072dc <_sbrk_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	d103      	bne.n	8006a5e <sbrk_aligned+0x26>
 8006a56:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	1cc4      	adds	r4, r0, #3
 8006a60:	f024 0403 	bic.w	r4, r4, #3
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d0f8      	beq.n	8006a5a <sbrk_aligned+0x22>
 8006a68:	1a21      	subs	r1, r4, r0
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 fc36 	bl	80072dc <_sbrk_r>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d1f2      	bne.n	8006a5a <sbrk_aligned+0x22>
 8006a74:	e7ef      	b.n	8006a56 <sbrk_aligned+0x1e>
 8006a76:	bf00      	nop
 8006a78:	20000840 	.word	0x20000840

08006a7c <_malloc_r>:
 8006a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	1ccd      	adds	r5, r1, #3
 8006a82:	f025 0503 	bic.w	r5, r5, #3
 8006a86:	3508      	adds	r5, #8
 8006a88:	2d0c      	cmp	r5, #12
 8006a8a:	bf38      	it	cc
 8006a8c:	250c      	movcc	r5, #12
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	4606      	mov	r6, r0
 8006a92:	db01      	blt.n	8006a98 <_malloc_r+0x1c>
 8006a94:	42a9      	cmp	r1, r5
 8006a96:	d904      	bls.n	8006aa2 <_malloc_r+0x26>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	6033      	str	r3, [r6, #0]
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b78 <_malloc_r+0xfc>
 8006aa6:	f000 f869 	bl	8006b7c <__malloc_lock>
 8006aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8006aae:	461c      	mov	r4, r3
 8006ab0:	bb44      	cbnz	r4, 8006b04 <_malloc_r+0x88>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff ffbf 	bl	8006a38 <sbrk_aligned>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	4604      	mov	r4, r0
 8006abe:	d158      	bne.n	8006b72 <_malloc_r+0xf6>
 8006ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac4:	4627      	mov	r7, r4
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d143      	bne.n	8006b52 <_malloc_r+0xd6>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	d04b      	beq.n	8006b66 <_malloc_r+0xea>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	eb04 0903 	add.w	r9, r4, r3
 8006ad8:	f000 fc00 	bl	80072dc <_sbrk_r>
 8006adc:	4581      	cmp	r9, r0
 8006ade:	d142      	bne.n	8006b66 <_malloc_r+0xea>
 8006ae0:	6821      	ldr	r1, [r4, #0]
 8006ae2:	1a6d      	subs	r5, r5, r1
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ffa6 	bl	8006a38 <sbrk_aligned>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d03a      	beq.n	8006b66 <_malloc_r+0xea>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	442b      	add	r3, r5
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	f8d8 3000 	ldr.w	r3, [r8]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	bb62      	cbnz	r2, 8006b58 <_malloc_r+0xdc>
 8006afe:	f8c8 7000 	str.w	r7, [r8]
 8006b02:	e00f      	b.n	8006b24 <_malloc_r+0xa8>
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	1b52      	subs	r2, r2, r5
 8006b08:	d420      	bmi.n	8006b4c <_malloc_r+0xd0>
 8006b0a:	2a0b      	cmp	r2, #11
 8006b0c:	d917      	bls.n	8006b3e <_malloc_r+0xc2>
 8006b0e:	1961      	adds	r1, r4, r5
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	6025      	str	r5, [r4, #0]
 8006b14:	bf18      	it	ne
 8006b16:	6059      	strne	r1, [r3, #4]
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	bf08      	it	eq
 8006b1c:	f8c8 1000 	streq.w	r1, [r8]
 8006b20:	5162      	str	r2, [r4, r5]
 8006b22:	604b      	str	r3, [r1, #4]
 8006b24:	4630      	mov	r0, r6
 8006b26:	f000 f82f 	bl	8006b88 <__malloc_unlock>
 8006b2a:	f104 000b 	add.w	r0, r4, #11
 8006b2e:	1d23      	adds	r3, r4, #4
 8006b30:	f020 0007 	bic.w	r0, r0, #7
 8006b34:	1ac2      	subs	r2, r0, r3
 8006b36:	bf1c      	itt	ne
 8006b38:	1a1b      	subne	r3, r3, r0
 8006b3a:	50a3      	strne	r3, [r4, r2]
 8006b3c:	e7af      	b.n	8006a9e <_malloc_r+0x22>
 8006b3e:	6862      	ldr	r2, [r4, #4]
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	bf0c      	ite	eq
 8006b44:	f8c8 2000 	streq.w	r2, [r8]
 8006b48:	605a      	strne	r2, [r3, #4]
 8006b4a:	e7eb      	b.n	8006b24 <_malloc_r+0xa8>
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	6864      	ldr	r4, [r4, #4]
 8006b50:	e7ae      	b.n	8006ab0 <_malloc_r+0x34>
 8006b52:	463c      	mov	r4, r7
 8006b54:	687f      	ldr	r7, [r7, #4]
 8006b56:	e7b6      	b.n	8006ac6 <_malloc_r+0x4a>
 8006b58:	461a      	mov	r2, r3
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d1fb      	bne.n	8006b58 <_malloc_r+0xdc>
 8006b60:	2300      	movs	r3, #0
 8006b62:	6053      	str	r3, [r2, #4]
 8006b64:	e7de      	b.n	8006b24 <_malloc_r+0xa8>
 8006b66:	230c      	movs	r3, #12
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f000 f80c 	bl	8006b88 <__malloc_unlock>
 8006b70:	e794      	b.n	8006a9c <_malloc_r+0x20>
 8006b72:	6005      	str	r5, [r0, #0]
 8006b74:	e7d6      	b.n	8006b24 <_malloc_r+0xa8>
 8006b76:	bf00      	nop
 8006b78:	20000844 	.word	0x20000844

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	@ (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f7ff beda 	b.w	8006936 <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	2000083c 	.word	0x2000083c

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	@ (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f7ff bed5 	b.w	8006938 <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	2000083c 	.word	0x2000083c

08006b94 <__ssputs_r>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	688e      	ldr	r6, [r1, #8]
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	42be      	cmp	r6, r7
 8006b9e:	680b      	ldr	r3, [r1, #0]
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	4690      	mov	r8, r2
 8006ba6:	d82d      	bhi.n	8006c04 <__ssputs_r+0x70>
 8006ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bb0:	d026      	beq.n	8006c00 <__ssputs_r+0x6c>
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	6909      	ldr	r1, [r1, #16]
 8006bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bba:	eba3 0901 	sub.w	r9, r3, r1
 8006bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc2:	1c7b      	adds	r3, r7, #1
 8006bc4:	444b      	add	r3, r9
 8006bc6:	106d      	asrs	r5, r5, #1
 8006bc8:	429d      	cmp	r5, r3
 8006bca:	bf38      	it	cc
 8006bcc:	461d      	movcc	r5, r3
 8006bce:	0553      	lsls	r3, r2, #21
 8006bd0:	d527      	bpl.n	8006c22 <__ssputs_r+0x8e>
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	f7ff ff52 	bl	8006a7c <_malloc_r>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	b360      	cbz	r0, 8006c36 <__ssputs_r+0xa2>
 8006bdc:	6921      	ldr	r1, [r4, #16]
 8006bde:	464a      	mov	r2, r9
 8006be0:	f7ff feab 	bl	800693a <memcpy>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	6126      	str	r6, [r4, #16]
 8006bf2:	6165      	str	r5, [r4, #20]
 8006bf4:	444e      	add	r6, r9
 8006bf6:	eba5 0509 	sub.w	r5, r5, r9
 8006bfa:	6026      	str	r6, [r4, #0]
 8006bfc:	60a5      	str	r5, [r4, #8]
 8006bfe:	463e      	mov	r6, r7
 8006c00:	42be      	cmp	r6, r7
 8006c02:	d900      	bls.n	8006c06 <__ssputs_r+0x72>
 8006c04:	463e      	mov	r6, r7
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	f7ff fdff 	bl	800680e <memmove>
 8006c10:	68a3      	ldr	r3, [r4, #8]
 8006c12:	1b9b      	subs	r3, r3, r6
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	4433      	add	r3, r6
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c22:	462a      	mov	r2, r5
 8006c24:	f000 fb71 	bl	800730a <_realloc_r>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d1e0      	bne.n	8006bf0 <__ssputs_r+0x5c>
 8006c2e:	6921      	ldr	r1, [r4, #16]
 8006c30:	4650      	mov	r0, sl
 8006c32:	f7ff feaf 	bl	8006994 <_free_r>
 8006c36:	230c      	movs	r3, #12
 8006c38:	f8ca 3000 	str.w	r3, [sl]
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e7e9      	b.n	8006c1e <__ssputs_r+0x8a>
	...

08006c4c <_svfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	4698      	mov	r8, r3
 8006c52:	898b      	ldrh	r3, [r1, #12]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	b09d      	sub	sp, #116	@ 0x74
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	d510      	bpl.n	8006c82 <_svfiprintf_r+0x36>
 8006c60:	690b      	ldr	r3, [r1, #16]
 8006c62:	b973      	cbnz	r3, 8006c82 <_svfiprintf_r+0x36>
 8006c64:	2140      	movs	r1, #64	@ 0x40
 8006c66:	f7ff ff09 	bl	8006a7c <_malloc_r>
 8006c6a:	6028      	str	r0, [r5, #0]
 8006c6c:	6128      	str	r0, [r5, #16]
 8006c6e:	b930      	cbnz	r0, 8006c7e <_svfiprintf_r+0x32>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b01d      	add	sp, #116	@ 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	2340      	movs	r3, #64	@ 0x40
 8006c80:	616b      	str	r3, [r5, #20]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c86:	2320      	movs	r3, #32
 8006c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c90:	2330      	movs	r3, #48	@ 0x30
 8006c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e30 <_svfiprintf_r+0x1e4>
 8006c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c9a:	f04f 0901 	mov.w	r9, #1
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca6:	b10a      	cbz	r2, 8006cac <_svfiprintf_r+0x60>
 8006ca8:	2a25      	cmp	r2, #37	@ 0x25
 8006caa:	d1f9      	bne.n	8006ca0 <_svfiprintf_r+0x54>
 8006cac:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb0:	d00b      	beq.n	8006cca <_svfiprintf_r+0x7e>
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ff6b 	bl	8006b94 <__ssputs_r>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f000 80a7 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc6:	445a      	add	r2, fp
 8006cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cca:	f89a 3000 	ldrb.w	r3, [sl]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 809f 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cde:	f10a 0a01 	add.w	sl, sl, #1
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cec:	4654      	mov	r4, sl
 8006cee:	2205      	movs	r2, #5
 8006cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf4:	484e      	ldr	r0, [pc, #312]	@ (8006e30 <_svfiprintf_r+0x1e4>)
 8006cf6:	f7f9 fa6b 	bl	80001d0 <memchr>
 8006cfa:	9a04      	ldr	r2, [sp, #16]
 8006cfc:	b9d8      	cbnz	r0, 8006d36 <_svfiprintf_r+0xea>
 8006cfe:	06d0      	lsls	r0, r2, #27
 8006d00:	bf44      	itt	mi
 8006d02:	2320      	movmi	r3, #32
 8006d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d08:	0711      	lsls	r1, r2, #28
 8006d0a:	bf44      	itt	mi
 8006d0c:	232b      	movmi	r3, #43	@ 0x2b
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d18:	d015      	beq.n	8006d46 <_svfiprintf_r+0xfa>
 8006d1a:	9a07      	ldr	r2, [sp, #28]
 8006d1c:	4654      	mov	r4, sl
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f04f 0c0a 	mov.w	ip, #10
 8006d24:	4621      	mov	r1, r4
 8006d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2a:	3b30      	subs	r3, #48	@ 0x30
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d94b      	bls.n	8006dc8 <_svfiprintf_r+0x17c>
 8006d30:	b1b0      	cbz	r0, 8006d60 <_svfiprintf_r+0x114>
 8006d32:	9207      	str	r2, [sp, #28]
 8006d34:	e014      	b.n	8006d60 <_svfiprintf_r+0x114>
 8006d36:	eba0 0308 	sub.w	r3, r0, r8
 8006d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	46a2      	mov	sl, r4
 8006d44:	e7d2      	b.n	8006cec <_svfiprintf_r+0xa0>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d19      	adds	r1, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9103      	str	r1, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfbb      	ittet	lt
 8006d52:	425b      	neglt	r3, r3
 8006d54:	f042 0202 	orrlt.w	r2, r2, #2
 8006d58:	9307      	strge	r3, [sp, #28]
 8006d5a:	9307      	strlt	r3, [sp, #28]
 8006d5c:	bfb8      	it	lt
 8006d5e:	9204      	strlt	r2, [sp, #16]
 8006d60:	7823      	ldrb	r3, [r4, #0]
 8006d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d64:	d10a      	bne.n	8006d7c <_svfiprintf_r+0x130>
 8006d66:	7863      	ldrb	r3, [r4, #1]
 8006d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d6a:	d132      	bne.n	8006dd2 <_svfiprintf_r+0x186>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	1d1a      	adds	r2, r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d78:	3402      	adds	r4, #2
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e40 <_svfiprintf_r+0x1f4>
 8006d80:	7821      	ldrb	r1, [r4, #0]
 8006d82:	2203      	movs	r2, #3
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7f9 fa23 	bl	80001d0 <memchr>
 8006d8a:	b138      	cbz	r0, 8006d9c <_svfiprintf_r+0x150>
 8006d8c:	9b04      	ldr	r3, [sp, #16]
 8006d8e:	eba0 000a 	sub.w	r0, r0, sl
 8006d92:	2240      	movs	r2, #64	@ 0x40
 8006d94:	4082      	lsls	r2, r0
 8006d96:	4313      	orrs	r3, r2
 8006d98:	3401      	adds	r4, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da0:	4824      	ldr	r0, [pc, #144]	@ (8006e34 <_svfiprintf_r+0x1e8>)
 8006da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006da6:	2206      	movs	r2, #6
 8006da8:	f7f9 fa12 	bl	80001d0 <memchr>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d036      	beq.n	8006e1e <_svfiprintf_r+0x1d2>
 8006db0:	4b21      	ldr	r3, [pc, #132]	@ (8006e38 <_svfiprintf_r+0x1ec>)
 8006db2:	bb1b      	cbnz	r3, 8006dfc <_svfiprintf_r+0x1b0>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	3307      	adds	r3, #7
 8006db8:	f023 0307 	bic.w	r3, r3, #7
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc2:	4433      	add	r3, r6
 8006dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc6:	e76a      	b.n	8006c9e <_svfiprintf_r+0x52>
 8006dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dcc:	460c      	mov	r4, r1
 8006dce:	2001      	movs	r0, #1
 8006dd0:	e7a8      	b.n	8006d24 <_svfiprintf_r+0xd8>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	3401      	adds	r4, #1
 8006dd6:	9305      	str	r3, [sp, #20]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f04f 0c0a 	mov.w	ip, #10
 8006dde:	4620      	mov	r0, r4
 8006de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de4:	3a30      	subs	r2, #48	@ 0x30
 8006de6:	2a09      	cmp	r2, #9
 8006de8:	d903      	bls.n	8006df2 <_svfiprintf_r+0x1a6>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0c6      	beq.n	8006d7c <_svfiprintf_r+0x130>
 8006dee:	9105      	str	r1, [sp, #20]
 8006df0:	e7c4      	b.n	8006d7c <_svfiprintf_r+0x130>
 8006df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df6:	4604      	mov	r4, r0
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e7f0      	b.n	8006dde <_svfiprintf_r+0x192>
 8006dfc:	ab03      	add	r3, sp, #12
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	462a      	mov	r2, r5
 8006e02:	4b0e      	ldr	r3, [pc, #56]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e04:	a904      	add	r1, sp, #16
 8006e06:	4638      	mov	r0, r7
 8006e08:	f3af 8000 	nop.w
 8006e0c:	1c42      	adds	r2, r0, #1
 8006e0e:	4606      	mov	r6, r0
 8006e10:	d1d6      	bne.n	8006dc0 <_svfiprintf_r+0x174>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	065b      	lsls	r3, r3, #25
 8006e16:	f53f af2d 	bmi.w	8006c74 <_svfiprintf_r+0x28>
 8006e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e1c:	e72c      	b.n	8006c78 <_svfiprintf_r+0x2c>
 8006e1e:	ab03      	add	r3, sp, #12
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	462a      	mov	r2, r5
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e26:	a904      	add	r1, sp, #16
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f000 f879 	bl	8006f20 <_printf_i>
 8006e2e:	e7ed      	b.n	8006e0c <_svfiprintf_r+0x1c0>
 8006e30:	08009507 	.word	0x08009507
 8006e34:	08009511 	.word	0x08009511
 8006e38:	00000000 	.word	0x00000000
 8006e3c:	08006b95 	.word	0x08006b95
 8006e40:	0800950d 	.word	0x0800950d

08006e44 <_printf_common>:
 8006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	4616      	mov	r6, r2
 8006e4a:	4698      	mov	r8, r3
 8006e4c:	688a      	ldr	r2, [r1, #8]
 8006e4e:	690b      	ldr	r3, [r1, #16]
 8006e50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	bfb8      	it	lt
 8006e58:	4613      	movlt	r3, r2
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e60:	4607      	mov	r7, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	b10a      	cbz	r2, 8006e6a <_printf_common+0x26>
 8006e66:	3301      	adds	r3, #1
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	0699      	lsls	r1, r3, #26
 8006e6e:	bf42      	ittt	mi
 8006e70:	6833      	ldrmi	r3, [r6, #0]
 8006e72:	3302      	addmi	r3, #2
 8006e74:	6033      	strmi	r3, [r6, #0]
 8006e76:	6825      	ldr	r5, [r4, #0]
 8006e78:	f015 0506 	ands.w	r5, r5, #6
 8006e7c:	d106      	bne.n	8006e8c <_printf_common+0x48>
 8006e7e:	f104 0a19 	add.w	sl, r4, #25
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc26      	bgt.n	8006eda <_printf_common+0x96>
 8006e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	3b00      	subs	r3, #0
 8006e94:	bf18      	it	ne
 8006e96:	2301      	movne	r3, #1
 8006e98:	0692      	lsls	r2, r2, #26
 8006e9a:	d42b      	bmi.n	8006ef4 <_printf_common+0xb0>
 8006e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c8      	blx	r9
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d01e      	beq.n	8006ee8 <_printf_common+0xa4>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	f003 0306 	and.w	r3, r3, #6
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	bf02      	ittt	eq
 8006eb6:	68e5      	ldreq	r5, [r4, #12]
 8006eb8:	6833      	ldreq	r3, [r6, #0]
 8006eba:	1aed      	subeq	r5, r5, r3
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	bf0c      	ite	eq
 8006ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec4:	2500      	movne	r5, #0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfc4      	itt	gt
 8006eca:	1a9b      	subgt	r3, r3, r2
 8006ecc:	18ed      	addgt	r5, r5, r3
 8006ece:	2600      	movs	r6, #0
 8006ed0:	341a      	adds	r4, #26
 8006ed2:	42b5      	cmp	r5, r6
 8006ed4:	d11a      	bne.n	8006f0c <_printf_common+0xc8>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e008      	b.n	8006eec <_printf_common+0xa8>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4652      	mov	r2, sl
 8006ede:	4641      	mov	r1, r8
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	47c8      	blx	r9
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d103      	bne.n	8006ef0 <_printf_common+0xac>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	e7c6      	b.n	8006e82 <_printf_common+0x3e>
 8006ef4:	18e1      	adds	r1, r4, r3
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	2030      	movs	r0, #48	@ 0x30
 8006efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006efe:	4422      	add	r2, r4
 8006f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f08:	3302      	adds	r3, #2
 8006f0a:	e7c7      	b.n	8006e9c <_printf_common+0x58>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4622      	mov	r2, r4
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c8      	blx	r9
 8006f16:	3001      	adds	r0, #1
 8006f18:	d0e6      	beq.n	8006ee8 <_printf_common+0xa4>
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7d9      	b.n	8006ed2 <_printf_common+0x8e>
	...

08006f20 <_printf_i>:
 8006f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	7e0f      	ldrb	r7, [r1, #24]
 8006f26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f28:	2f78      	cmp	r7, #120	@ 0x78
 8006f2a:	4691      	mov	r9, r2
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	469a      	mov	sl, r3
 8006f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f36:	d807      	bhi.n	8006f48 <_printf_i+0x28>
 8006f38:	2f62      	cmp	r7, #98	@ 0x62
 8006f3a:	d80a      	bhi.n	8006f52 <_printf_i+0x32>
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	f000 80d2 	beq.w	80070e6 <_printf_i+0x1c6>
 8006f42:	2f58      	cmp	r7, #88	@ 0x58
 8006f44:	f000 80b9 	beq.w	80070ba <_printf_i+0x19a>
 8006f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f50:	e03a      	b.n	8006fc8 <_printf_i+0xa8>
 8006f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f56:	2b15      	cmp	r3, #21
 8006f58:	d8f6      	bhi.n	8006f48 <_printf_i+0x28>
 8006f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f60 <_printf_i+0x40>)
 8006f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f60:	08006fb9 	.word	0x08006fb9
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006f49 	.word	0x08006f49
 8006f6c:	08006f49 	.word	0x08006f49
 8006f70:	08006f49 	.word	0x08006f49
 8006f74:	08006f49 	.word	0x08006f49
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006f49 	.word	0x08006f49
 8006f80:	08006f49 	.word	0x08006f49
 8006f84:	08006f49 	.word	0x08006f49
 8006f88:	08006f49 	.word	0x08006f49
 8006f8c:	080070cd 	.word	0x080070cd
 8006f90:	08006ff7 	.word	0x08006ff7
 8006f94:	08007087 	.word	0x08007087
 8006f98:	08006f49 	.word	0x08006f49
 8006f9c:	08006f49 	.word	0x08006f49
 8006fa0:	080070ef 	.word	0x080070ef
 8006fa4:	08006f49 	.word	0x08006f49
 8006fa8:	08006ff7 	.word	0x08006ff7
 8006fac:	08006f49 	.word	0x08006f49
 8006fb0:	08006f49 	.word	0x08006f49
 8006fb4:	0800708f 	.word	0x0800708f
 8006fb8:	6833      	ldr	r3, [r6, #0]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6032      	str	r2, [r6, #0]
 8006fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e09d      	b.n	8007108 <_printf_i+0x1e8>
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	6820      	ldr	r0, [r4, #0]
 8006fd0:	1d19      	adds	r1, r3, #4
 8006fd2:	6031      	str	r1, [r6, #0]
 8006fd4:	0606      	lsls	r6, r0, #24
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0xbc>
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	e003      	b.n	8006fe4 <_printf_i+0xc4>
 8006fdc:	0645      	lsls	r5, r0, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0xb8>
 8006fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	da03      	bge.n	8006ff0 <_printf_i+0xd0>
 8006fe8:	232d      	movs	r3, #45	@ 0x2d
 8006fea:	426d      	negs	r5, r5
 8006fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff0:	4859      	ldr	r0, [pc, #356]	@ (8007158 <_printf_i+0x238>)
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	e011      	b.n	800701a <_printf_i+0xfa>
 8006ff6:	6821      	ldr	r1, [r4, #0]
 8006ff8:	6833      	ldr	r3, [r6, #0]
 8006ffa:	0608      	lsls	r0, r1, #24
 8006ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007000:	d402      	bmi.n	8007008 <_printf_i+0xe8>
 8007002:	0649      	lsls	r1, r1, #25
 8007004:	bf48      	it	mi
 8007006:	b2ad      	uxthmi	r5, r5
 8007008:	2f6f      	cmp	r7, #111	@ 0x6f
 800700a:	4853      	ldr	r0, [pc, #332]	@ (8007158 <_printf_i+0x238>)
 800700c:	6033      	str	r3, [r6, #0]
 800700e:	bf14      	ite	ne
 8007010:	230a      	movne	r3, #10
 8007012:	2308      	moveq	r3, #8
 8007014:	2100      	movs	r1, #0
 8007016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800701a:	6866      	ldr	r6, [r4, #4]
 800701c:	60a6      	str	r6, [r4, #8]
 800701e:	2e00      	cmp	r6, #0
 8007020:	bfa2      	ittt	ge
 8007022:	6821      	ldrge	r1, [r4, #0]
 8007024:	f021 0104 	bicge.w	r1, r1, #4
 8007028:	6021      	strge	r1, [r4, #0]
 800702a:	b90d      	cbnz	r5, 8007030 <_printf_i+0x110>
 800702c:	2e00      	cmp	r6, #0
 800702e:	d04b      	beq.n	80070c8 <_printf_i+0x1a8>
 8007030:	4616      	mov	r6, r2
 8007032:	fbb5 f1f3 	udiv	r1, r5, r3
 8007036:	fb03 5711 	mls	r7, r3, r1, r5
 800703a:	5dc7      	ldrb	r7, [r0, r7]
 800703c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007040:	462f      	mov	r7, r5
 8007042:	42bb      	cmp	r3, r7
 8007044:	460d      	mov	r5, r1
 8007046:	d9f4      	bls.n	8007032 <_printf_i+0x112>
 8007048:	2b08      	cmp	r3, #8
 800704a:	d10b      	bne.n	8007064 <_printf_i+0x144>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07df      	lsls	r7, r3, #31
 8007050:	d508      	bpl.n	8007064 <_printf_i+0x144>
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	6861      	ldr	r1, [r4, #4]
 8007056:	4299      	cmp	r1, r3
 8007058:	bfde      	ittt	le
 800705a:	2330      	movle	r3, #48	@ 0x30
 800705c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007064:	1b92      	subs	r2, r2, r6
 8007066:	6122      	str	r2, [r4, #16]
 8007068:	f8cd a000 	str.w	sl, [sp]
 800706c:	464b      	mov	r3, r9
 800706e:	aa03      	add	r2, sp, #12
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f7ff fee6 	bl	8006e44 <_printf_common>
 8007078:	3001      	adds	r0, #1
 800707a:	d14a      	bne.n	8007112 <_printf_i+0x1f2>
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	b004      	add	sp, #16
 8007082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f043 0320 	orr.w	r3, r3, #32
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	4833      	ldr	r0, [pc, #204]	@ (800715c <_printf_i+0x23c>)
 8007090:	2778      	movs	r7, #120	@ 0x78
 8007092:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	6831      	ldr	r1, [r6, #0]
 800709a:	061f      	lsls	r7, r3, #24
 800709c:	f851 5b04 	ldr.w	r5, [r1], #4
 80070a0:	d402      	bmi.n	80070a8 <_printf_i+0x188>
 80070a2:	065f      	lsls	r7, r3, #25
 80070a4:	bf48      	it	mi
 80070a6:	b2ad      	uxthmi	r5, r5
 80070a8:	6031      	str	r1, [r6, #0]
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	bf44      	itt	mi
 80070ae:	f043 0320 	orrmi.w	r3, r3, #32
 80070b2:	6023      	strmi	r3, [r4, #0]
 80070b4:	b11d      	cbz	r5, 80070be <_printf_i+0x19e>
 80070b6:	2310      	movs	r3, #16
 80070b8:	e7ac      	b.n	8007014 <_printf_i+0xf4>
 80070ba:	4827      	ldr	r0, [pc, #156]	@ (8007158 <_printf_i+0x238>)
 80070bc:	e7e9      	b.n	8007092 <_printf_i+0x172>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f023 0320 	bic.w	r3, r3, #32
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	e7f6      	b.n	80070b6 <_printf_i+0x196>
 80070c8:	4616      	mov	r6, r2
 80070ca:	e7bd      	b.n	8007048 <_printf_i+0x128>
 80070cc:	6833      	ldr	r3, [r6, #0]
 80070ce:	6825      	ldr	r5, [r4, #0]
 80070d0:	6961      	ldr	r1, [r4, #20]
 80070d2:	1d18      	adds	r0, r3, #4
 80070d4:	6030      	str	r0, [r6, #0]
 80070d6:	062e      	lsls	r6, r5, #24
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	d501      	bpl.n	80070e0 <_printf_i+0x1c0>
 80070dc:	6019      	str	r1, [r3, #0]
 80070de:	e002      	b.n	80070e6 <_printf_i+0x1c6>
 80070e0:	0668      	lsls	r0, r5, #25
 80070e2:	d5fb      	bpl.n	80070dc <_printf_i+0x1bc>
 80070e4:	8019      	strh	r1, [r3, #0]
 80070e6:	2300      	movs	r3, #0
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	4616      	mov	r6, r2
 80070ec:	e7bc      	b.n	8007068 <_printf_i+0x148>
 80070ee:	6833      	ldr	r3, [r6, #0]
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	6032      	str	r2, [r6, #0]
 80070f4:	681e      	ldr	r6, [r3, #0]
 80070f6:	6862      	ldr	r2, [r4, #4]
 80070f8:	2100      	movs	r1, #0
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7f9 f868 	bl	80001d0 <memchr>
 8007100:	b108      	cbz	r0, 8007106 <_printf_i+0x1e6>
 8007102:	1b80      	subs	r0, r0, r6
 8007104:	6060      	str	r0, [r4, #4]
 8007106:	6863      	ldr	r3, [r4, #4]
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	2300      	movs	r3, #0
 800710c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007110:	e7aa      	b.n	8007068 <_printf_i+0x148>
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	4632      	mov	r2, r6
 8007116:	4649      	mov	r1, r9
 8007118:	4640      	mov	r0, r8
 800711a:	47d0      	blx	sl
 800711c:	3001      	adds	r0, #1
 800711e:	d0ad      	beq.n	800707c <_printf_i+0x15c>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	079b      	lsls	r3, r3, #30
 8007124:	d413      	bmi.n	800714e <_printf_i+0x22e>
 8007126:	68e0      	ldr	r0, [r4, #12]
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	4298      	cmp	r0, r3
 800712c:	bfb8      	it	lt
 800712e:	4618      	movlt	r0, r3
 8007130:	e7a6      	b.n	8007080 <_printf_i+0x160>
 8007132:	2301      	movs	r3, #1
 8007134:	4632      	mov	r2, r6
 8007136:	4649      	mov	r1, r9
 8007138:	4640      	mov	r0, r8
 800713a:	47d0      	blx	sl
 800713c:	3001      	adds	r0, #1
 800713e:	d09d      	beq.n	800707c <_printf_i+0x15c>
 8007140:	3501      	adds	r5, #1
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	9903      	ldr	r1, [sp, #12]
 8007146:	1a5b      	subs	r3, r3, r1
 8007148:	42ab      	cmp	r3, r5
 800714a:	dcf2      	bgt.n	8007132 <_printf_i+0x212>
 800714c:	e7eb      	b.n	8007126 <_printf_i+0x206>
 800714e:	2500      	movs	r5, #0
 8007150:	f104 0619 	add.w	r6, r4, #25
 8007154:	e7f5      	b.n	8007142 <_printf_i+0x222>
 8007156:	bf00      	nop
 8007158:	08009518 	.word	0x08009518
 800715c:	08009529 	.word	0x08009529

08007160 <__sflush_r>:
 8007160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007168:	0716      	lsls	r6, r2, #28
 800716a:	4605      	mov	r5, r0
 800716c:	460c      	mov	r4, r1
 800716e:	d454      	bmi.n	800721a <__sflush_r+0xba>
 8007170:	684b      	ldr	r3, [r1, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	dc02      	bgt.n	800717c <__sflush_r+0x1c>
 8007176:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	dd48      	ble.n	800720e <__sflush_r+0xae>
 800717c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800717e:	2e00      	cmp	r6, #0
 8007180:	d045      	beq.n	800720e <__sflush_r+0xae>
 8007182:	2300      	movs	r3, #0
 8007184:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007188:	682f      	ldr	r7, [r5, #0]
 800718a:	6a21      	ldr	r1, [r4, #32]
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	d030      	beq.n	80071f2 <__sflush_r+0x92>
 8007190:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	0759      	lsls	r1, r3, #29
 8007196:	d505      	bpl.n	80071a4 <__sflush_r+0x44>
 8007198:	6863      	ldr	r3, [r4, #4]
 800719a:	1ad2      	subs	r2, r2, r3
 800719c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800719e:	b10b      	cbz	r3, 80071a4 <__sflush_r+0x44>
 80071a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	2300      	movs	r3, #0
 80071a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071a8:	6a21      	ldr	r1, [r4, #32]
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b0      	blx	r6
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	d106      	bne.n	80071c2 <__sflush_r+0x62>
 80071b4:	6829      	ldr	r1, [r5, #0]
 80071b6:	291d      	cmp	r1, #29
 80071b8:	d82b      	bhi.n	8007212 <__sflush_r+0xb2>
 80071ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007264 <__sflush_r+0x104>)
 80071bc:	410a      	asrs	r2, r1
 80071be:	07d6      	lsls	r6, r2, #31
 80071c0:	d427      	bmi.n	8007212 <__sflush_r+0xb2>
 80071c2:	2200      	movs	r2, #0
 80071c4:	6062      	str	r2, [r4, #4]
 80071c6:	04d9      	lsls	r1, r3, #19
 80071c8:	6922      	ldr	r2, [r4, #16]
 80071ca:	6022      	str	r2, [r4, #0]
 80071cc:	d504      	bpl.n	80071d8 <__sflush_r+0x78>
 80071ce:	1c42      	adds	r2, r0, #1
 80071d0:	d101      	bne.n	80071d6 <__sflush_r+0x76>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	b903      	cbnz	r3, 80071d8 <__sflush_r+0x78>
 80071d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80071d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071da:	602f      	str	r7, [r5, #0]
 80071dc:	b1b9      	cbz	r1, 800720e <__sflush_r+0xae>
 80071de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071e2:	4299      	cmp	r1, r3
 80071e4:	d002      	beq.n	80071ec <__sflush_r+0x8c>
 80071e6:	4628      	mov	r0, r5
 80071e8:	f7ff fbd4 	bl	8006994 <_free_r>
 80071ec:	2300      	movs	r3, #0
 80071ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80071f0:	e00d      	b.n	800720e <__sflush_r+0xae>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b0      	blx	r6
 80071f8:	4602      	mov	r2, r0
 80071fa:	1c50      	adds	r0, r2, #1
 80071fc:	d1c9      	bne.n	8007192 <__sflush_r+0x32>
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0c6      	beq.n	8007192 <__sflush_r+0x32>
 8007204:	2b1d      	cmp	r3, #29
 8007206:	d001      	beq.n	800720c <__sflush_r+0xac>
 8007208:	2b16      	cmp	r3, #22
 800720a:	d11e      	bne.n	800724a <__sflush_r+0xea>
 800720c:	602f      	str	r7, [r5, #0]
 800720e:	2000      	movs	r0, #0
 8007210:	e022      	b.n	8007258 <__sflush_r+0xf8>
 8007212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007216:	b21b      	sxth	r3, r3
 8007218:	e01b      	b.n	8007252 <__sflush_r+0xf2>
 800721a:	690f      	ldr	r7, [r1, #16]
 800721c:	2f00      	cmp	r7, #0
 800721e:	d0f6      	beq.n	800720e <__sflush_r+0xae>
 8007220:	0793      	lsls	r3, r2, #30
 8007222:	680e      	ldr	r6, [r1, #0]
 8007224:	bf08      	it	eq
 8007226:	694b      	ldreq	r3, [r1, #20]
 8007228:	600f      	str	r7, [r1, #0]
 800722a:	bf18      	it	ne
 800722c:	2300      	movne	r3, #0
 800722e:	eba6 0807 	sub.w	r8, r6, r7
 8007232:	608b      	str	r3, [r1, #8]
 8007234:	f1b8 0f00 	cmp.w	r8, #0
 8007238:	dde9      	ble.n	800720e <__sflush_r+0xae>
 800723a:	6a21      	ldr	r1, [r4, #32]
 800723c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800723e:	4643      	mov	r3, r8
 8007240:	463a      	mov	r2, r7
 8007242:	4628      	mov	r0, r5
 8007244:	47b0      	blx	r6
 8007246:	2800      	cmp	r0, #0
 8007248:	dc08      	bgt.n	800725c <__sflush_r+0xfc>
 800724a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800724e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800725c:	4407      	add	r7, r0
 800725e:	eba8 0800 	sub.w	r8, r8, r0
 8007262:	e7e7      	b.n	8007234 <__sflush_r+0xd4>
 8007264:	dfbffffe 	.word	0xdfbffffe

08007268 <_fflush_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	690b      	ldr	r3, [r1, #16]
 800726c:	4605      	mov	r5, r0
 800726e:	460c      	mov	r4, r1
 8007270:	b913      	cbnz	r3, 8007278 <_fflush_r+0x10>
 8007272:	2500      	movs	r5, #0
 8007274:	4628      	mov	r0, r5
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	b118      	cbz	r0, 8007282 <_fflush_r+0x1a>
 800727a:	6a03      	ldr	r3, [r0, #32]
 800727c:	b90b      	cbnz	r3, 8007282 <_fflush_r+0x1a>
 800727e:	f7ff fa19 	bl	80066b4 <__sinit>
 8007282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f3      	beq.n	8007272 <_fflush_r+0xa>
 800728a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800728c:	07d0      	lsls	r0, r2, #31
 800728e:	d404      	bmi.n	800729a <_fflush_r+0x32>
 8007290:	0599      	lsls	r1, r3, #22
 8007292:	d402      	bmi.n	800729a <_fflush_r+0x32>
 8007294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007296:	f7ff fb4e 	bl	8006936 <__retarget_lock_acquire_recursive>
 800729a:	4628      	mov	r0, r5
 800729c:	4621      	mov	r1, r4
 800729e:	f7ff ff5f 	bl	8007160 <__sflush_r>
 80072a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072a4:	07da      	lsls	r2, r3, #31
 80072a6:	4605      	mov	r5, r0
 80072a8:	d4e4      	bmi.n	8007274 <_fflush_r+0xc>
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	059b      	lsls	r3, r3, #22
 80072ae:	d4e1      	bmi.n	8007274 <_fflush_r+0xc>
 80072b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072b2:	f7ff fb41 	bl	8006938 <__retarget_lock_release_recursive>
 80072b6:	e7dd      	b.n	8007274 <_fflush_r+0xc>

080072b8 <fiprintf>:
 80072b8:	b40e      	push	{r1, r2, r3}
 80072ba:	b503      	push	{r0, r1, lr}
 80072bc:	4601      	mov	r1, r0
 80072be:	ab03      	add	r3, sp, #12
 80072c0:	4805      	ldr	r0, [pc, #20]	@ (80072d8 <fiprintf+0x20>)
 80072c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c6:	6800      	ldr	r0, [r0, #0]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	f000 f875 	bl	80073b8 <_vfiprintf_r>
 80072ce:	b002      	add	sp, #8
 80072d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d4:	b003      	add	sp, #12
 80072d6:	4770      	bx	lr
 80072d8:	2000002c 	.word	0x2000002c

080072dc <_sbrk_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d06      	ldr	r5, [pc, #24]	@ (80072f8 <_sbrk_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fb f818 	bl	800231c <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_sbrk_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_sbrk_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000838 	.word	0x20000838

080072fc <abort>:
 80072fc:	b508      	push	{r3, lr}
 80072fe:	2006      	movs	r0, #6
 8007300:	f000 fa2e 	bl	8007760 <raise>
 8007304:	2001      	movs	r0, #1
 8007306:	f7fa ff91 	bl	800222c <_exit>

0800730a <_realloc_r>:
 800730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730e:	4680      	mov	r8, r0
 8007310:	4615      	mov	r5, r2
 8007312:	460c      	mov	r4, r1
 8007314:	b921      	cbnz	r1, 8007320 <_realloc_r+0x16>
 8007316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800731a:	4611      	mov	r1, r2
 800731c:	f7ff bbae 	b.w	8006a7c <_malloc_r>
 8007320:	b92a      	cbnz	r2, 800732e <_realloc_r+0x24>
 8007322:	f7ff fb37 	bl	8006994 <_free_r>
 8007326:	2400      	movs	r4, #0
 8007328:	4620      	mov	r0, r4
 800732a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732e:	f000 fa33 	bl	8007798 <_malloc_usable_size_r>
 8007332:	4285      	cmp	r5, r0
 8007334:	4606      	mov	r6, r0
 8007336:	d802      	bhi.n	800733e <_realloc_r+0x34>
 8007338:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800733c:	d8f4      	bhi.n	8007328 <_realloc_r+0x1e>
 800733e:	4629      	mov	r1, r5
 8007340:	4640      	mov	r0, r8
 8007342:	f7ff fb9b 	bl	8006a7c <_malloc_r>
 8007346:	4607      	mov	r7, r0
 8007348:	2800      	cmp	r0, #0
 800734a:	d0ec      	beq.n	8007326 <_realloc_r+0x1c>
 800734c:	42b5      	cmp	r5, r6
 800734e:	462a      	mov	r2, r5
 8007350:	4621      	mov	r1, r4
 8007352:	bf28      	it	cs
 8007354:	4632      	movcs	r2, r6
 8007356:	f7ff faf0 	bl	800693a <memcpy>
 800735a:	4621      	mov	r1, r4
 800735c:	4640      	mov	r0, r8
 800735e:	f7ff fb19 	bl	8006994 <_free_r>
 8007362:	463c      	mov	r4, r7
 8007364:	e7e0      	b.n	8007328 <_realloc_r+0x1e>

08007366 <__sfputc_r>:
 8007366:	6893      	ldr	r3, [r2, #8]
 8007368:	3b01      	subs	r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	b410      	push	{r4}
 800736e:	6093      	str	r3, [r2, #8]
 8007370:	da08      	bge.n	8007384 <__sfputc_r+0x1e>
 8007372:	6994      	ldr	r4, [r2, #24]
 8007374:	42a3      	cmp	r3, r4
 8007376:	db01      	blt.n	800737c <__sfputc_r+0x16>
 8007378:	290a      	cmp	r1, #10
 800737a:	d103      	bne.n	8007384 <__sfputc_r+0x1e>
 800737c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007380:	f000 b932 	b.w	80075e8 <__swbuf_r>
 8007384:	6813      	ldr	r3, [r2, #0]
 8007386:	1c58      	adds	r0, r3, #1
 8007388:	6010      	str	r0, [r2, #0]
 800738a:	7019      	strb	r1, [r3, #0]
 800738c:	4608      	mov	r0, r1
 800738e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007392:	4770      	bx	lr

08007394 <__sfputs_r>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	4606      	mov	r6, r0
 8007398:	460f      	mov	r7, r1
 800739a:	4614      	mov	r4, r2
 800739c:	18d5      	adds	r5, r2, r3
 800739e:	42ac      	cmp	r4, r5
 80073a0:	d101      	bne.n	80073a6 <__sfputs_r+0x12>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e007      	b.n	80073b6 <__sfputs_r+0x22>
 80073a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073aa:	463a      	mov	r2, r7
 80073ac:	4630      	mov	r0, r6
 80073ae:	f7ff ffda 	bl	8007366 <__sfputc_r>
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	d1f3      	bne.n	800739e <__sfputs_r+0xa>
 80073b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073b8 <_vfiprintf_r>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	460d      	mov	r5, r1
 80073be:	b09d      	sub	sp, #116	@ 0x74
 80073c0:	4614      	mov	r4, r2
 80073c2:	4698      	mov	r8, r3
 80073c4:	4606      	mov	r6, r0
 80073c6:	b118      	cbz	r0, 80073d0 <_vfiprintf_r+0x18>
 80073c8:	6a03      	ldr	r3, [r0, #32]
 80073ca:	b90b      	cbnz	r3, 80073d0 <_vfiprintf_r+0x18>
 80073cc:	f7ff f972 	bl	80066b4 <__sinit>
 80073d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_vfiprintf_r+0x2a>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	059a      	lsls	r2, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_vfiprintf_r+0x2a>
 80073dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073de:	f7ff faaa 	bl	8006936 <__retarget_lock_acquire_recursive>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	071b      	lsls	r3, r3, #28
 80073e6:	d501      	bpl.n	80073ec <_vfiprintf_r+0x34>
 80073e8:	692b      	ldr	r3, [r5, #16]
 80073ea:	b99b      	cbnz	r3, 8007414 <_vfiprintf_r+0x5c>
 80073ec:	4629      	mov	r1, r5
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 f938 	bl	8007664 <__swsetup_r>
 80073f4:	b170      	cbz	r0, 8007414 <_vfiprintf_r+0x5c>
 80073f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073f8:	07dc      	lsls	r4, r3, #31
 80073fa:	d504      	bpl.n	8007406 <_vfiprintf_r+0x4e>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	b01d      	add	sp, #116	@ 0x74
 8007402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	0598      	lsls	r0, r3, #22
 800740a:	d4f7      	bmi.n	80073fc <_vfiprintf_r+0x44>
 800740c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800740e:	f7ff fa93 	bl	8006938 <__retarget_lock_release_recursive>
 8007412:	e7f3      	b.n	80073fc <_vfiprintf_r+0x44>
 8007414:	2300      	movs	r3, #0
 8007416:	9309      	str	r3, [sp, #36]	@ 0x24
 8007418:	2320      	movs	r3, #32
 800741a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800741e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007422:	2330      	movs	r3, #48	@ 0x30
 8007424:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075d4 <_vfiprintf_r+0x21c>
 8007428:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800742c:	f04f 0901 	mov.w	r9, #1
 8007430:	4623      	mov	r3, r4
 8007432:	469a      	mov	sl, r3
 8007434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007438:	b10a      	cbz	r2, 800743e <_vfiprintf_r+0x86>
 800743a:	2a25      	cmp	r2, #37	@ 0x25
 800743c:	d1f9      	bne.n	8007432 <_vfiprintf_r+0x7a>
 800743e:	ebba 0b04 	subs.w	fp, sl, r4
 8007442:	d00b      	beq.n	800745c <_vfiprintf_r+0xa4>
 8007444:	465b      	mov	r3, fp
 8007446:	4622      	mov	r2, r4
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff ffa2 	bl	8007394 <__sfputs_r>
 8007450:	3001      	adds	r0, #1
 8007452:	f000 80a7 	beq.w	80075a4 <_vfiprintf_r+0x1ec>
 8007456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007458:	445a      	add	r2, fp
 800745a:	9209      	str	r2, [sp, #36]	@ 0x24
 800745c:	f89a 3000 	ldrb.w	r3, [sl]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 809f 	beq.w	80075a4 <_vfiprintf_r+0x1ec>
 8007466:	2300      	movs	r3, #0
 8007468:	f04f 32ff 	mov.w	r2, #4294967295
 800746c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007470:	f10a 0a01 	add.w	sl, sl, #1
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800747c:	931a      	str	r3, [sp, #104]	@ 0x68
 800747e:	4654      	mov	r4, sl
 8007480:	2205      	movs	r2, #5
 8007482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007486:	4853      	ldr	r0, [pc, #332]	@ (80075d4 <_vfiprintf_r+0x21c>)
 8007488:	f7f8 fea2 	bl	80001d0 <memchr>
 800748c:	9a04      	ldr	r2, [sp, #16]
 800748e:	b9d8      	cbnz	r0, 80074c8 <_vfiprintf_r+0x110>
 8007490:	06d1      	lsls	r1, r2, #27
 8007492:	bf44      	itt	mi
 8007494:	2320      	movmi	r3, #32
 8007496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800749a:	0713      	lsls	r3, r2, #28
 800749c:	bf44      	itt	mi
 800749e:	232b      	movmi	r3, #43	@ 0x2b
 80074a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074a4:	f89a 3000 	ldrb.w	r3, [sl]
 80074a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074aa:	d015      	beq.n	80074d8 <_vfiprintf_r+0x120>
 80074ac:	9a07      	ldr	r2, [sp, #28]
 80074ae:	4654      	mov	r4, sl
 80074b0:	2000      	movs	r0, #0
 80074b2:	f04f 0c0a 	mov.w	ip, #10
 80074b6:	4621      	mov	r1, r4
 80074b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074bc:	3b30      	subs	r3, #48	@ 0x30
 80074be:	2b09      	cmp	r3, #9
 80074c0:	d94b      	bls.n	800755a <_vfiprintf_r+0x1a2>
 80074c2:	b1b0      	cbz	r0, 80074f2 <_vfiprintf_r+0x13a>
 80074c4:	9207      	str	r2, [sp, #28]
 80074c6:	e014      	b.n	80074f2 <_vfiprintf_r+0x13a>
 80074c8:	eba0 0308 	sub.w	r3, r0, r8
 80074cc:	fa09 f303 	lsl.w	r3, r9, r3
 80074d0:	4313      	orrs	r3, r2
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	46a2      	mov	sl, r4
 80074d6:	e7d2      	b.n	800747e <_vfiprintf_r+0xc6>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	1d19      	adds	r1, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	9103      	str	r1, [sp, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bfbb      	ittet	lt
 80074e4:	425b      	neglt	r3, r3
 80074e6:	f042 0202 	orrlt.w	r2, r2, #2
 80074ea:	9307      	strge	r3, [sp, #28]
 80074ec:	9307      	strlt	r3, [sp, #28]
 80074ee:	bfb8      	it	lt
 80074f0:	9204      	strlt	r2, [sp, #16]
 80074f2:	7823      	ldrb	r3, [r4, #0]
 80074f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80074f6:	d10a      	bne.n	800750e <_vfiprintf_r+0x156>
 80074f8:	7863      	ldrb	r3, [r4, #1]
 80074fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80074fc:	d132      	bne.n	8007564 <_vfiprintf_r+0x1ac>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	1d1a      	adds	r2, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9203      	str	r2, [sp, #12]
 8007506:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800750a:	3402      	adds	r4, #2
 800750c:	9305      	str	r3, [sp, #20]
 800750e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075e4 <_vfiprintf_r+0x22c>
 8007512:	7821      	ldrb	r1, [r4, #0]
 8007514:	2203      	movs	r2, #3
 8007516:	4650      	mov	r0, sl
 8007518:	f7f8 fe5a 	bl	80001d0 <memchr>
 800751c:	b138      	cbz	r0, 800752e <_vfiprintf_r+0x176>
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	eba0 000a 	sub.w	r0, r0, sl
 8007524:	2240      	movs	r2, #64	@ 0x40
 8007526:	4082      	lsls	r2, r0
 8007528:	4313      	orrs	r3, r2
 800752a:	3401      	adds	r4, #1
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007532:	4829      	ldr	r0, [pc, #164]	@ (80075d8 <_vfiprintf_r+0x220>)
 8007534:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007538:	2206      	movs	r2, #6
 800753a:	f7f8 fe49 	bl	80001d0 <memchr>
 800753e:	2800      	cmp	r0, #0
 8007540:	d03f      	beq.n	80075c2 <_vfiprintf_r+0x20a>
 8007542:	4b26      	ldr	r3, [pc, #152]	@ (80075dc <_vfiprintf_r+0x224>)
 8007544:	bb1b      	cbnz	r3, 800758e <_vfiprintf_r+0x1d6>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	3307      	adds	r3, #7
 800754a:	f023 0307 	bic.w	r3, r3, #7
 800754e:	3308      	adds	r3, #8
 8007550:	9303      	str	r3, [sp, #12]
 8007552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007554:	443b      	add	r3, r7
 8007556:	9309      	str	r3, [sp, #36]	@ 0x24
 8007558:	e76a      	b.n	8007430 <_vfiprintf_r+0x78>
 800755a:	fb0c 3202 	mla	r2, ip, r2, r3
 800755e:	460c      	mov	r4, r1
 8007560:	2001      	movs	r0, #1
 8007562:	e7a8      	b.n	80074b6 <_vfiprintf_r+0xfe>
 8007564:	2300      	movs	r3, #0
 8007566:	3401      	adds	r4, #1
 8007568:	9305      	str	r3, [sp, #20]
 800756a:	4619      	mov	r1, r3
 800756c:	f04f 0c0a 	mov.w	ip, #10
 8007570:	4620      	mov	r0, r4
 8007572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007576:	3a30      	subs	r2, #48	@ 0x30
 8007578:	2a09      	cmp	r2, #9
 800757a:	d903      	bls.n	8007584 <_vfiprintf_r+0x1cc>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0c6      	beq.n	800750e <_vfiprintf_r+0x156>
 8007580:	9105      	str	r1, [sp, #20]
 8007582:	e7c4      	b.n	800750e <_vfiprintf_r+0x156>
 8007584:	fb0c 2101 	mla	r1, ip, r1, r2
 8007588:	4604      	mov	r4, r0
 800758a:	2301      	movs	r3, #1
 800758c:	e7f0      	b.n	8007570 <_vfiprintf_r+0x1b8>
 800758e:	ab03      	add	r3, sp, #12
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	462a      	mov	r2, r5
 8007594:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <_vfiprintf_r+0x228>)
 8007596:	a904      	add	r1, sp, #16
 8007598:	4630      	mov	r0, r6
 800759a:	f3af 8000 	nop.w
 800759e:	4607      	mov	r7, r0
 80075a0:	1c78      	adds	r0, r7, #1
 80075a2:	d1d6      	bne.n	8007552 <_vfiprintf_r+0x19a>
 80075a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075a6:	07d9      	lsls	r1, r3, #31
 80075a8:	d405      	bmi.n	80075b6 <_vfiprintf_r+0x1fe>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	059a      	lsls	r2, r3, #22
 80075ae:	d402      	bmi.n	80075b6 <_vfiprintf_r+0x1fe>
 80075b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075b2:	f7ff f9c1 	bl	8006938 <__retarget_lock_release_recursive>
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	065b      	lsls	r3, r3, #25
 80075ba:	f53f af1f 	bmi.w	80073fc <_vfiprintf_r+0x44>
 80075be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075c0:	e71e      	b.n	8007400 <_vfiprintf_r+0x48>
 80075c2:	ab03      	add	r3, sp, #12
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	462a      	mov	r2, r5
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <_vfiprintf_r+0x228>)
 80075ca:	a904      	add	r1, sp, #16
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff fca7 	bl	8006f20 <_printf_i>
 80075d2:	e7e4      	b.n	800759e <_vfiprintf_r+0x1e6>
 80075d4:	08009507 	.word	0x08009507
 80075d8:	08009511 	.word	0x08009511
 80075dc:	00000000 	.word	0x00000000
 80075e0:	08007395 	.word	0x08007395
 80075e4:	0800950d 	.word	0x0800950d

080075e8 <__swbuf_r>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	460e      	mov	r6, r1
 80075ec:	4614      	mov	r4, r2
 80075ee:	4605      	mov	r5, r0
 80075f0:	b118      	cbz	r0, 80075fa <__swbuf_r+0x12>
 80075f2:	6a03      	ldr	r3, [r0, #32]
 80075f4:	b90b      	cbnz	r3, 80075fa <__swbuf_r+0x12>
 80075f6:	f7ff f85d 	bl	80066b4 <__sinit>
 80075fa:	69a3      	ldr	r3, [r4, #24]
 80075fc:	60a3      	str	r3, [r4, #8]
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	071a      	lsls	r2, r3, #28
 8007602:	d501      	bpl.n	8007608 <__swbuf_r+0x20>
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	b943      	cbnz	r3, 800761a <__swbuf_r+0x32>
 8007608:	4621      	mov	r1, r4
 800760a:	4628      	mov	r0, r5
 800760c:	f000 f82a 	bl	8007664 <__swsetup_r>
 8007610:	b118      	cbz	r0, 800761a <__swbuf_r+0x32>
 8007612:	f04f 37ff 	mov.w	r7, #4294967295
 8007616:	4638      	mov	r0, r7
 8007618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	6922      	ldr	r2, [r4, #16]
 800761e:	1a98      	subs	r0, r3, r2
 8007620:	6963      	ldr	r3, [r4, #20]
 8007622:	b2f6      	uxtb	r6, r6
 8007624:	4283      	cmp	r3, r0
 8007626:	4637      	mov	r7, r6
 8007628:	dc05      	bgt.n	8007636 <__swbuf_r+0x4e>
 800762a:	4621      	mov	r1, r4
 800762c:	4628      	mov	r0, r5
 800762e:	f7ff fe1b 	bl	8007268 <_fflush_r>
 8007632:	2800      	cmp	r0, #0
 8007634:	d1ed      	bne.n	8007612 <__swbuf_r+0x2a>
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	3b01      	subs	r3, #1
 800763a:	60a3      	str	r3, [r4, #8]
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	6022      	str	r2, [r4, #0]
 8007642:	701e      	strb	r6, [r3, #0]
 8007644:	6962      	ldr	r2, [r4, #20]
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	429a      	cmp	r2, r3
 800764a:	d004      	beq.n	8007656 <__swbuf_r+0x6e>
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	07db      	lsls	r3, r3, #31
 8007650:	d5e1      	bpl.n	8007616 <__swbuf_r+0x2e>
 8007652:	2e0a      	cmp	r6, #10
 8007654:	d1df      	bne.n	8007616 <__swbuf_r+0x2e>
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	f7ff fe05 	bl	8007268 <_fflush_r>
 800765e:	2800      	cmp	r0, #0
 8007660:	d0d9      	beq.n	8007616 <__swbuf_r+0x2e>
 8007662:	e7d6      	b.n	8007612 <__swbuf_r+0x2a>

08007664 <__swsetup_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4b29      	ldr	r3, [pc, #164]	@ (800770c <__swsetup_r+0xa8>)
 8007668:	4605      	mov	r5, r0
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	460c      	mov	r4, r1
 800766e:	b118      	cbz	r0, 8007678 <__swsetup_r+0x14>
 8007670:	6a03      	ldr	r3, [r0, #32]
 8007672:	b90b      	cbnz	r3, 8007678 <__swsetup_r+0x14>
 8007674:	f7ff f81e 	bl	80066b4 <__sinit>
 8007678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800767c:	0719      	lsls	r1, r3, #28
 800767e:	d422      	bmi.n	80076c6 <__swsetup_r+0x62>
 8007680:	06da      	lsls	r2, r3, #27
 8007682:	d407      	bmi.n	8007694 <__swsetup_r+0x30>
 8007684:	2209      	movs	r2, #9
 8007686:	602a      	str	r2, [r5, #0]
 8007688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	f04f 30ff 	mov.w	r0, #4294967295
 8007692:	e033      	b.n	80076fc <__swsetup_r+0x98>
 8007694:	0758      	lsls	r0, r3, #29
 8007696:	d512      	bpl.n	80076be <__swsetup_r+0x5a>
 8007698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800769a:	b141      	cbz	r1, 80076ae <__swsetup_r+0x4a>
 800769c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d002      	beq.n	80076aa <__swsetup_r+0x46>
 80076a4:	4628      	mov	r0, r5
 80076a6:	f7ff f975 	bl	8006994 <_free_r>
 80076aa:	2300      	movs	r3, #0
 80076ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	2300      	movs	r3, #0
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	f043 0308 	orr.w	r3, r3, #8
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	b94b      	cbnz	r3, 80076de <__swsetup_r+0x7a>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076d4:	d003      	beq.n	80076de <__swsetup_r+0x7a>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 f88b 	bl	80077f4 <__smakebuf_r>
 80076de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e2:	f013 0201 	ands.w	r2, r3, #1
 80076e6:	d00a      	beq.n	80076fe <__swsetup_r+0x9a>
 80076e8:	2200      	movs	r2, #0
 80076ea:	60a2      	str	r2, [r4, #8]
 80076ec:	6962      	ldr	r2, [r4, #20]
 80076ee:	4252      	negs	r2, r2
 80076f0:	61a2      	str	r2, [r4, #24]
 80076f2:	6922      	ldr	r2, [r4, #16]
 80076f4:	b942      	cbnz	r2, 8007708 <__swsetup_r+0xa4>
 80076f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076fa:	d1c5      	bne.n	8007688 <__swsetup_r+0x24>
 80076fc:	bd38      	pop	{r3, r4, r5, pc}
 80076fe:	0799      	lsls	r1, r3, #30
 8007700:	bf58      	it	pl
 8007702:	6962      	ldrpl	r2, [r4, #20]
 8007704:	60a2      	str	r2, [r4, #8]
 8007706:	e7f4      	b.n	80076f2 <__swsetup_r+0x8e>
 8007708:	2000      	movs	r0, #0
 800770a:	e7f7      	b.n	80076fc <__swsetup_r+0x98>
 800770c:	2000002c 	.word	0x2000002c

08007710 <_raise_r>:
 8007710:	291f      	cmp	r1, #31
 8007712:	b538      	push	{r3, r4, r5, lr}
 8007714:	4605      	mov	r5, r0
 8007716:	460c      	mov	r4, r1
 8007718:	d904      	bls.n	8007724 <_raise_r+0x14>
 800771a:	2316      	movs	r3, #22
 800771c:	6003      	str	r3, [r0, #0]
 800771e:	f04f 30ff 	mov.w	r0, #4294967295
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007726:	b112      	cbz	r2, 800772e <_raise_r+0x1e>
 8007728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800772c:	b94b      	cbnz	r3, 8007742 <_raise_r+0x32>
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f830 	bl	8007794 <_getpid_r>
 8007734:	4622      	mov	r2, r4
 8007736:	4601      	mov	r1, r0
 8007738:	4628      	mov	r0, r5
 800773a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773e:	f000 b817 	b.w	8007770 <_kill_r>
 8007742:	2b01      	cmp	r3, #1
 8007744:	d00a      	beq.n	800775c <_raise_r+0x4c>
 8007746:	1c59      	adds	r1, r3, #1
 8007748:	d103      	bne.n	8007752 <_raise_r+0x42>
 800774a:	2316      	movs	r3, #22
 800774c:	6003      	str	r3, [r0, #0]
 800774e:	2001      	movs	r0, #1
 8007750:	e7e7      	b.n	8007722 <_raise_r+0x12>
 8007752:	2100      	movs	r1, #0
 8007754:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007758:	4620      	mov	r0, r4
 800775a:	4798      	blx	r3
 800775c:	2000      	movs	r0, #0
 800775e:	e7e0      	b.n	8007722 <_raise_r+0x12>

08007760 <raise>:
 8007760:	4b02      	ldr	r3, [pc, #8]	@ (800776c <raise+0xc>)
 8007762:	4601      	mov	r1, r0
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	f7ff bfd3 	b.w	8007710 <_raise_r>
 800776a:	bf00      	nop
 800776c:	2000002c 	.word	0x2000002c

08007770 <_kill_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d07      	ldr	r5, [pc, #28]	@ (8007790 <_kill_r+0x20>)
 8007774:	2300      	movs	r3, #0
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	4611      	mov	r1, r2
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	f7fa fd45 	bl	800220c <_kill>
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	d102      	bne.n	800778c <_kill_r+0x1c>
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	b103      	cbz	r3, 800778c <_kill_r+0x1c>
 800778a:	6023      	str	r3, [r4, #0]
 800778c:	bd38      	pop	{r3, r4, r5, pc}
 800778e:	bf00      	nop
 8007790:	20000838 	.word	0x20000838

08007794 <_getpid_r>:
 8007794:	f7fa bd32 	b.w	80021fc <_getpid>

08007798 <_malloc_usable_size_r>:
 8007798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800779c:	1f18      	subs	r0, r3, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bfbc      	itt	lt
 80077a2:	580b      	ldrlt	r3, [r1, r0]
 80077a4:	18c0      	addlt	r0, r0, r3
 80077a6:	4770      	bx	lr

080077a8 <__swhatbuf_r>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	460c      	mov	r4, r1
 80077ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b0:	2900      	cmp	r1, #0
 80077b2:	b096      	sub	sp, #88	@ 0x58
 80077b4:	4615      	mov	r5, r2
 80077b6:	461e      	mov	r6, r3
 80077b8:	da0d      	bge.n	80077d6 <__swhatbuf_r+0x2e>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077c0:	f04f 0100 	mov.w	r1, #0
 80077c4:	bf14      	ite	ne
 80077c6:	2340      	movne	r3, #64	@ 0x40
 80077c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077cc:	2000      	movs	r0, #0
 80077ce:	6031      	str	r1, [r6, #0]
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	b016      	add	sp, #88	@ 0x58
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
 80077d6:	466a      	mov	r2, sp
 80077d8:	f000 f848 	bl	800786c <_fstat_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	dbec      	blt.n	80077ba <__swhatbuf_r+0x12>
 80077e0:	9901      	ldr	r1, [sp, #4]
 80077e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077ea:	4259      	negs	r1, r3
 80077ec:	4159      	adcs	r1, r3
 80077ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077f2:	e7eb      	b.n	80077cc <__swhatbuf_r+0x24>

080077f4 <__smakebuf_r>:
 80077f4:	898b      	ldrh	r3, [r1, #12]
 80077f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077f8:	079d      	lsls	r5, r3, #30
 80077fa:	4606      	mov	r6, r0
 80077fc:	460c      	mov	r4, r1
 80077fe:	d507      	bpl.n	8007810 <__smakebuf_r+0x1c>
 8007800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	2301      	movs	r3, #1
 800780a:	6163      	str	r3, [r4, #20]
 800780c:	b003      	add	sp, #12
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007810:	ab01      	add	r3, sp, #4
 8007812:	466a      	mov	r2, sp
 8007814:	f7ff ffc8 	bl	80077a8 <__swhatbuf_r>
 8007818:	9f00      	ldr	r7, [sp, #0]
 800781a:	4605      	mov	r5, r0
 800781c:	4639      	mov	r1, r7
 800781e:	4630      	mov	r0, r6
 8007820:	f7ff f92c 	bl	8006a7c <_malloc_r>
 8007824:	b948      	cbnz	r0, 800783a <__smakebuf_r+0x46>
 8007826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782a:	059a      	lsls	r2, r3, #22
 800782c:	d4ee      	bmi.n	800780c <__smakebuf_r+0x18>
 800782e:	f023 0303 	bic.w	r3, r3, #3
 8007832:	f043 0302 	orr.w	r3, r3, #2
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	e7e2      	b.n	8007800 <__smakebuf_r+0xc>
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	6020      	str	r0, [r4, #0]
 800783e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800784a:	b15b      	cbz	r3, 8007864 <__smakebuf_r+0x70>
 800784c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007850:	4630      	mov	r0, r6
 8007852:	f000 f81d 	bl	8007890 <_isatty_r>
 8007856:	b128      	cbz	r0, 8007864 <__smakebuf_r+0x70>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	f043 0301 	orr.w	r3, r3, #1
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	431d      	orrs	r5, r3
 8007868:	81a5      	strh	r5, [r4, #12]
 800786a:	e7cf      	b.n	800780c <__smakebuf_r+0x18>

0800786c <_fstat_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d07      	ldr	r5, [pc, #28]	@ (800788c <_fstat_r+0x20>)
 8007870:	2300      	movs	r3, #0
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	4611      	mov	r1, r2
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	f7fa fd27 	bl	80022cc <_fstat>
 800787e:	1c43      	adds	r3, r0, #1
 8007880:	d102      	bne.n	8007888 <_fstat_r+0x1c>
 8007882:	682b      	ldr	r3, [r5, #0]
 8007884:	b103      	cbz	r3, 8007888 <_fstat_r+0x1c>
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	bd38      	pop	{r3, r4, r5, pc}
 800788a:	bf00      	nop
 800788c:	20000838 	.word	0x20000838

08007890 <_isatty_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d06      	ldr	r5, [pc, #24]	@ (80078ac <_isatty_r+0x1c>)
 8007894:	2300      	movs	r3, #0
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	602b      	str	r3, [r5, #0]
 800789c:	f7fa fd26 	bl	80022ec <_isatty>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_isatty_r+0x1a>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_isatty_r+0x1a>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20000838 	.word	0x20000838

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
